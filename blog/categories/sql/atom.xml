<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SQL | Michael Minter]]></title>
  <link href="http://moorberry.net/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2014-03-04T23:36:14-06:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multi Column Unique Indexes]]></title>
    <link href="http://moorberry.net/blog/multi-column-unique-indexes/"/>
    <updated>2014-01-15T13:45:00-06:00</updated>
    <id>http://moorberry.net/blog/multi-column-unique-indexes</id>
    <content type="html"><![CDATA[<p>When a database key is created from a combination of two or more columns, the key is called a <strong>composite key</strong>. Each column may not be unique by itself within the database table but when combined with the other column(s) in the composite key, the combination is unique.</p>

<!-- more -->


<p>The following data is taken from the <strong>Google DFP Report API</strong> example source code.</p>

<p><code>sql
CREATE TABLE `src_dfp` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `ad_unit_1` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ad_unit_2` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ad_unit_id_1` int(11) DEFAULT NULL,
  `ad_unit_id_2` int(11) DEFAULT NULL,
  `advertiser_id` int(11) DEFAULT NULL,
  `advertiser_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `creative_id` bigint(11) DEFAULT NULL,
  `creative_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `date` date DEFAULT NULL,
  `line_item_cost_per_unit` int(11) DEFAULT NULL,
  `line_item_cost_type` varchar(11) COLLATE utf8_unicode_ci DEFAULT NULL,
  `line_item_end_date_time` datetime DEFAULT NULL,
  `line_item_id` int(11) DEFAULT NULL,
  `line_item_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `line_item_start_date_time` datetime DEFAULT NULL,
  `line_item_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `merged_ad_server_clicks` int(11) DEFAULT NULL,
  `merged_ad_server_impressions` int(11) DEFAULT NULL,
  `order_end_date_time` datetime DEFAULT NULL,
  `order_id` int(11) DEFAULT NULL,
  `order_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `order_start_date_time` datetime DEFAULT NULL,
  `created_at` datetime DEFAULT NOW(),
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `composite_dfp` (`date`,`ad_unit_id_1`,`ad_unit_id_2`,`advertiser_id`,`creative_id`,`line_item_id`,`order_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
</code></p>

<p>Or to modify an existing table:</p>

<p><code>sql
ALTER TABLE src_dfp ADD UNIQUE index composite_dfp (date, ad_unit_id_1, ad_unit_id_2, advertiser_id, creative_id, line_item_id, order_id);
</code></p>

<p></p>


<p>Which will generate these keys:</p>

<p><code>bash
+------------+---------------+-------------------+---------------+-----------+-------------+----------+--------+
| Non Unique |   Key Name    | Sequence in Index |  Column Name  | Collation | Cardinality | Sub Part | Packed |
+------------+---------------+-------------------+---------------+-----------+-------------+----------+--------+
|          0 | PRIMARY       |                 1 | id            | A         |           0 | NULL     | NULL   |
|          0 | composite_dfp |                 1 | date          | A         |           1 | NULL     | NULL   |
|          0 | composite_dfp |                 2 | ad_unit_id_1  | A         |           2 | NULL     | NULL   |
|          0 | composite_dfp |                 3 | ad_unit_id_2  | A         |           3 | NULL     | NULL   |
|          0 | composite_dfp |                 4 | advertiser_id | A         |           4 | NULL     | NULL   |
|          0 | composite_dfp |                 5 | creative_id   | A         |           5 | NULL     | NULL   |
|          0 | composite_dfp |                 6 | line_item_id  | A         |           6 | NULL     | NULL   |
|          0 | composite_dfp |                 7 | order_id      | A         |           7 | NULL     | NULL   |
+------------+---------------+-------------------+---------------+-----------+-------------+----------+--------+
</code></p>

<p><em>Don't let the color highlighting above fool you. <strong>date</strong> is another column in the table.</em></p>

<p>Now, if you try to rerun the same import against existing data, you'll receive the following error message: <code>Duplicate entry '2014-01-14-83243539-236269939-15980539-32298017059-67086499-1643' for key 'composite_dfp'</code></p>

<p>A <strong>UNIQUE</strong> index creates a constraint such that all values in the index must be distinct. An error occurs if you try to add a new row with a key value that matches an existing row. This constraint does not apply to NULL values <strong>except for the BDB storage engine</strong>. For other engines, a UNIQUE index allows multiple NULL values for columns that can contain NULL. <a href="http://dev.mysql.com/doc/refman/5.0/en/create-index.html">Document Source</a></p>

<h2>MySQL Workbench</h2>

<p><strong>1.</strong> Go to the edit window for the table you're working on</p>

<p><img src="http://moorberry.net/images/posts/mysql-workbench.jpg" alt="MySQL Workbench" width="100%" /></p>

<p><strong>2.</strong> Add a new index in the far-left screen by clicking on the new index row and giving the new index a name<br />
<strong>3.</strong> Select the <strong>UNIQUE</strong> type<br />
<strong>4.</strong> Check all of the corresponding index columns to the right</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres: Search and Sort by Distance]]></title>
    <link href="http://moorberry.net/blog/postgres-search-distance/"/>
    <updated>2013-12-11T13:01:00-06:00</updated>
    <id>http://moorberry.net/blog/postgres-search-distance</id>
    <content type="html"><![CDATA[<p>Request users by radial distance and sort by nearest to farthest, vice versa, or whatever other attributes you'd like to include.</p>

<!-- more -->


<p>Searching for a user by distance, in your database, is easy with <strong>Postgres</strong>. Just create a users table with, at minimum, columns named <em>latitude</em> and <em>longitude</em>.</p>

<h2>Data</h2>

<p><code>bash
postgres=# SELECT * FROM users;
+----+------+----------+-----------+
| id | name | latitude | longitude |
+----+------+----------+-----------+
</code></p>

<h2>SQL</h2>

<p><code>sql
SELECT name, distance
FROM
( SELECT name, ((ACOS(SIN(#{latitude} * PI() / 180) * SIN(u.latitude * PI() / 180) + COS(#{latitude} * PI() / 180) * COS(u.latitude * PI() / 180) * COS((#{longitude} - u.longitude) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) as distance
FROM users u ) d
WHERE distance &lt;= 5
ORDER BY distance ASC;
</code></p>

<p>Matches all users <code>WHERE distance &lt;= 5</code> (less than or equal to five <strong>miles</strong>).</p>

<p>To change the distance to kilometers&mdash;multiply the output number by 1.609344 (1 mile == 1.609344 kilometers).</p>

<p>Replace <code>#{latitude}</code> with the value for the latitude you want to match against the database and do the same for <code>#{longitude}</code></p>

<p>This will work in any SQL relational database, including <strong>MySQL</strong> and <strong>Oracle</strong>.</p>
]]></content>
  </entry>
  
</feed>
