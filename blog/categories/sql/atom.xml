<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SQL | Michael Minter]]></title>
  <link href="http://moorberry.net/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2014-05-08T23:08:48-05:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Database Version Control with MySQL Utilities]]></title>
    <link href="http://moorberry.net/blog/database-version-control/"/>
    <updated>2014-04-13T23:30:00-05:00</updated>
    <id>http://moorberry.net/blog/database-version-control</id>
    <content type="html"><![CDATA[<p>The following steps are meant to capture a snapshot of your development database structure and your staging/production database structure, compare the two, and provide SQL to consolidate the differences.</p>

<!-- more -->


<p>This article relates to one of many methods for <strong>database version control</strong> in a singular or team-based environment.</p>

<h2>MySQL Workbench</h2>

<p>Having <strong>MySQL Workbench</strong> is not mandatory for this process. But it's a nice interface to consolidate the suite of tools that <strong>MySQL</strong> offers.</p>

<p>Download <a href="http://dev.mysql.com/downloads/tools/workbench/">http://dev.mysql.com/downloads/tools/workbench/</a></p>

<h2>MySQL Utilities</h2>

<p><strong>MySQL Utilities</strong> will install the required programs to finish the fowllowing steps.</p>

<p>Download <a href="http://dev.mysql.com/doc/workbench/en/mysql-utilities.html">http://dev.mysql.com/doc/workbench/en/mysql-utilities.html</a></p>

<h2>Verify MySQL Utilities</h2>

<p>Open <strong>MySQL Workbench</strong>.</p>

<p>Start <strong>MySQL Utilities</strong> from <strong>MySQL Workbench</strong>.</p>

<p><img src="http://dev.mysql.com/doc/workbench/en/images/wb-mysql-utilities-open.png" width="100%" /></p>

<p>The available <strong>MySQL Utilities</strong> programs can be seen in the console output below with the "help" command executed.</p>

<p>```
~$ mysqluc -e "help utilities"
Launching console ...</p>

<p>Utility           Description</p>

<hr />

<p>mysqlauditadmin   audit log maintenance utility
mysqlauditgrep    audit log search utility
mysqldbcompare    compare databases for consistency
mysqldbcopy       copy databases from one server to another
mysqldbexport     export metadata and data from databases
mysqldbimport     import metadata and data from files
mysqldiff         compare object definitions among objects where the</p>

<pre><code>              difference is how db1.obj1 differs from db2.obj2
</code></pre>

<p>mysqldiskusage    show disk usage for databases
mysqlfailover     automatic replication health monitoring and failover
mysqlfrm          show CREATE TABLE from .frm files
mysqlindexcheck   check for duplicate or redundant indexes
mysqlmetagrep     search metadata
mysqlprocgrep     search process information
mysqlreplicate    establish replication with a master
mysqlrpladmin     administration utility for MySQL replication
mysqlrplcheck     check replication
mysqlrplshow      show slaves attached to a master
mysqlserverclone  start another instance of a running server
mysqlserverinfo   show server information
mysqluserclone    clone a MySQL user account to one or more new users
```</p>

<p>The same can be done by entering <code>mysqluc -e "help utilities"</code> into your console.</p>

<p>If you receive the following error.</p>

<p><code>
Traceback (most recent call last):
  File "/bin/mysqluc", line 23, in &lt;module&gt;
  from mysql.utilities.common.options import license_callback, UtilitiesParser
File "/Library/Python/2.7/site-packages/mysql/utilities/common/options.py", line 34, in     &lt;module&gt;
from mysql.connector.conversion import MySQLConverter
ImportError: No module named connector.conversion
</code></p>

<blockquote><p><strong>ImportError: No module named connector.conversion</strong></p></blockquote>

<p><strong>MySQL Utilities</strong> assumes that the <strong>MySQL Connector</strong> for <strong>Python</strong> has been installed.</p>

<p>Download it here <a href="http://dev.mysql.com/downloads/connector/python/">http://dev.mysql.com/downloads/connector/python/</a></p>

<h2>Compare Databases with mysqldbcompare</h2>

<p>Run <strong>mysqldbcompare</strong>.</p>

<p>```
~$ mysqldbcompare --server1=<user>:<password>@<host> --server2=<user>:<password>@localhost dwh_production:dwh_development --run-all-tests --skip-data-check --difftype=sql</p>

<h1>server1 on localhost: ... connected.</h1>

<h1>server2 on localhost: ... connected.</h1>

<h1>Checking databases dwh_production on server1 and dwh_development on server2</h1>

<p>#
```</p>

<p>If you can't connect to your database directly, but can <strong>SSH</strong> into the platform that the database server is located on, run:</p>

<p><code>
~$ ssh -f -N -L 3307:localhost:3306 &lt;user&gt;@&lt;server&gt;
</code></p>

<p>Run <strong>mysqldbcompare</strong>.</p>

<p>```
~$ mysqldbcompare --server1=<user>:<password>@localhost:3307 --server2=<user>:<password>@localhost dwh_production:dwh_development --run-all-tests --skip-data-check --difftype=sql</p>

<h1>server1 on localhost: ... connected.</h1>

<h1>server2 on localhost: ... connected.</h1>

<h1>Checking databases dwh_production on server1 and dwh_development on server2</h1>

<p>#
```</p>

<p><strong>TIP:</strong> Generate a file with the above output.</p>

<p><code>
~$ mysqldbcompare --server1=&lt;database_user&gt;:&lt;database_password&gt;@localhost:3307 --server2=&lt;user&gt;:&lt;password&gt;@localhost dwh_production:dwh_development --run-all-tests --skip-data-check --difftype=sql &gt;&gt; mysqldbcompare.sql
</code></p>

<p>Now you have all the SQL to <strong>ALTER</strong> your production database structure so that it matches up with your development database structure.</p>

<h2>Import</h2>

<p>Import database <strong>ALTER</strong> statements.</p>

<p><code>
~$ mysqlimport -u &lt;user&gt; -p&lt;password&gt; dwh_production mysqldbcompare.sql
</code></p>

<h2>Verify</h2>

<p>Get a <strong>DIFF</strong> of the two databases.</p>

<p><code>
~$ mysqldbcompare --server1=&lt;database_user&gt;:&lt;database_password&gt;@localhost:3307 --server2=&lt;user&gt;:&lt;password&gt;@localhost dwh_production:dwh_development --run-all-tests --skip-data-check
</code></p>

<h2>Resources</h2>

<ul>
<li><a href="http://dev.mysql.com/doc/mysql-utilities/1.3/en/mysqldbcompare.html">http://dev.mysql.com/doc/mysql-utilities/1.3/en/mysqldbcompare.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi Column Unique Indexes]]></title>
    <link href="http://moorberry.net/blog/multi-column-unique-indexes/"/>
    <updated>2014-01-15T13:45:00-06:00</updated>
    <id>http://moorberry.net/blog/multi-column-unique-indexes</id>
    <content type="html"><![CDATA[<p>When a database key is created from a combination of two or more columns, the key is called a <strong>composite key</strong>. Each column may not be unique by itself within the database table but when combined with the other column(s) in the composite key, the combination is unique.</p>

<!-- more -->


<p>The following data is taken from the <strong>Google DFP Report API</strong> example source code.</p>

<p><code>sql
CREATE TABLE `src_dfp` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `ad_unit_1` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ad_unit_2` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ad_unit_id_1` int(11) DEFAULT NULL,
  `ad_unit_id_2` int(11) DEFAULT NULL,
  `advertiser_id` int(11) DEFAULT NULL,
  `advertiser_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `creative_id` bigint(11) DEFAULT NULL,
  `creative_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `date` date DEFAULT NULL,
  `line_item_cost_per_unit` int(11) DEFAULT NULL,
  `line_item_cost_type` varchar(11) COLLATE utf8_unicode_ci DEFAULT NULL,
  `line_item_end_date_time` datetime DEFAULT NULL,
  `line_item_id` int(11) DEFAULT NULL,
  `line_item_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `line_item_start_date_time` datetime DEFAULT NULL,
  `line_item_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `merged_ad_server_clicks` int(11) DEFAULT NULL,
  `merged_ad_server_impressions` int(11) DEFAULT NULL,
  `order_end_date_time` datetime DEFAULT NULL,
  `order_id` int(11) DEFAULT NULL,
  `order_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `order_start_date_time` datetime DEFAULT NULL,
  `created_at` datetime DEFAULT NOW(),
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `composite_dfp` (`date`,`ad_unit_id_1`,`ad_unit_id_2`,`advertiser_id`,`creative_id`,`line_item_id`,`order_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
</code></p>

<p>Or to modify an existing table:</p>

<p><code>sql
ALTER TABLE src_dfp ADD UNIQUE index composite_dfp (date, ad_unit_id_1, ad_unit_id_2, advertiser_id, creative_id, line_item_id, order_id);
</code></p>

<p></p>


<p>Which will generate these keys:</p>

<p><code>bash
+------------+---------------+-------------------+---------------+-----------+-------------+----------+--------+
| Non Unique |   Key Name    | Sequence in Index |  Column Name  | Collation | Cardinality | Sub Part | Packed |
+------------+---------------+-------------------+---------------+-----------+-------------+----------+--------+
|          0 | PRIMARY       |                 1 | id            | A         |           0 | NULL     | NULL   |
|          0 | composite_dfp |                 1 | date          | A         |           1 | NULL     | NULL   |
|          0 | composite_dfp |                 2 | ad_unit_id_1  | A         |           2 | NULL     | NULL   |
|          0 | composite_dfp |                 3 | ad_unit_id_2  | A         |           3 | NULL     | NULL   |
|          0 | composite_dfp |                 4 | advertiser_id | A         |           4 | NULL     | NULL   |
|          0 | composite_dfp |                 5 | creative_id   | A         |           5 | NULL     | NULL   |
|          0 | composite_dfp |                 6 | line_item_id  | A         |           6 | NULL     | NULL   |
|          0 | composite_dfp |                 7 | order_id      | A         |           7 | NULL     | NULL   |
+------------+---------------+-------------------+---------------+-----------+-------------+----------+--------+
</code></p>

<p><em>Don't let the color highlighting above fool you. <strong>date</strong> is another column in the table.</em></p>

<p>Now, if you try to rerun the same import against existing data, you'll receive the following error message: <code>Duplicate entry '2014-01-14-83243539-236269939-15980539-32298017059-67086499-1643' for key 'composite_dfp'</code></p>

<p>A <strong>UNIQUE</strong> index creates a constraint such that all values in the index must be distinct. An error occurs if you try to add a new row with a key value that matches an existing row. This constraint does not apply to NULL values <strong>except for the BDB storage engine</strong>. For other engines, a UNIQUE index allows multiple NULL values for columns that can contain NULL. <a href="http://dev.mysql.com/doc/refman/5.0/en/create-index.html">Document Source</a></p>

<h2>MySQL Workbench</h2>

<p><strong>1.</strong> Go to the edit window for the table you're working on</p>

<p><img src="http://moorberry.net/images/posts/mysql-workbench.jpg" alt="MySQL Workbench" width="100%" /></p>

<p><strong>2.</strong> Add a new index in the far-left screen by clicking on the new index row and giving the new index a name<br />
<strong>3.</strong> Select the <strong>UNIQUE</strong> type<br />
<strong>4.</strong> Check all of the corresponding index columns to the right</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres: Search and Sort by Distance]]></title>
    <link href="http://moorberry.net/blog/postgres-search-distance/"/>
    <updated>2013-12-11T13:01:00-06:00</updated>
    <id>http://moorberry.net/blog/postgres-search-distance</id>
    <content type="html"><![CDATA[<p>Request users by radial distance and sort by nearest to farthest, vice versa, or whatever other attributes you'd like to include.</p>

<!-- more -->


<p>Searching for a user by distance, in your database, is easy with <strong>Postgres</strong>. Just create a users table with, at minimum, columns named <em>latitude</em> and <em>longitude</em>.</p>

<h2>Data</h2>

<p><code>bash
postgres=# SELECT * FROM users;
+----+------+----------+-----------+
| id | name | latitude | longitude |
+----+------+----------+-----------+
</code></p>

<h2>SQL</h2>

<p><code>sql
SELECT name, distance
FROM
( SELECT name, ((ACOS(SIN(#{latitude} * PI() / 180) * SIN(u.latitude * PI() / 180) + COS(#{latitude} * PI() / 180) * COS(u.latitude * PI() / 180) * COS((#{longitude} - u.longitude) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) as distance
FROM users u ) d
WHERE distance &lt;= 5
ORDER BY distance ASC;
</code></p>

<p>Matches all users <code>WHERE distance &lt;= 5</code> (less than or equal to five <strong>miles</strong>).</p>

<p>To change the distance to kilometers&mdash;multiply the output number by 1.609344 (1 mile == 1.609344 kilometers).</p>

<p>Replace <code>#{latitude}</code> with the value for the latitude you want to match against the database and do the same for <code>#{longitude}</code></p>

<p>This will work in any SQL relational database, including <strong>MySQL</strong> and <strong>Oracle</strong>.</p>
]]></content>
  </entry>
  
</feed>
