<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Michael Minter]]></title>
  <link href="http://moorberry.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2013-02-16T10:23:28-06:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Special Notes Lookup in Rails]]></title>
    <link href="http://moorberry.net/blog/notes/"/>
    <updated>2012-11-06T17:52:00-06:00</updated>
    <id>http://moorberry.net/blog/notes</id>
    <content type="html"><![CDATA[<p>Add special notes to your source code comments in Rails to later remind you of tasks you need to complete:</p>

<!--more-->


<p>``` perl
class Article &lt; ActiveRecord::Base
  # TODO add named_scopes
  # FIXME method A is broken
  # OPTIMIZE improve the code</p>

<p>  has_many :comments
  ....
end
```</p>

<p>Some programming IDEs, such as <a href="http://www.aptana.com/" target="_blank">Aptana Studio 3</a> (free), will even highlight the key notation part.</p>

<p>Now, from the command line, you can list these special notes with a rake task:</p>

<p><code>html
$ rake notes
app/models/article.rb:
  * [2] [TODO] add named_scopes
  * [3] [FIXME] method A is broken
  * [4] [OPTIMIZE] improve the code
</code></p>

<p>You can also list notes of each kind individually with <code>rake notes:todo</code>, <code>rake notes:fixme</code> and <code>rake notes:optimize</code>.</p>

<p>You can even list your own, custom notes with <code>rake notes:custom ANNOTATION=MYANNO</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML Not Rendering in Gmail]]></title>
    <link href="http://moorberry.net/blog/html-not-rendering-in-gmail/"/>
    <updated>2011-12-10T12:52:00-06:00</updated>
    <id>http://moorberry.net/blog/html-not-rendering-in-gmail</id>
    <content type="html"><![CDATA[<p>I’ve been handling many of my company’s email campaigns for some time now and I can honestly say that it’s been pretty fun from a technical stand-point. There’s a lot that goes into email marketing (not including the marketing/sales implications). It has it’s own conventions, ideologies, and I believe to the utmost that there’s a larger future than presumed in store for the sometimes misunderstood technology. (I’m patiently waiting for a mobile device header-type.)</p>

<!--more-->


<p><img src="http://moorberry.net/images/posts/sendgrid-banner.jpeg" title="SendGrid" alt="SendGrid" style="width:710px;" /></p>

<p>Recently I’ve been using my new skills while working on my own applications using <a href="http://sendgrid.tellapal.com/a/clk/1zzx0" title="SendGrid">SendGrid</a> as an alternative SMTP and email analytics tool. And I’ve only really come across one major programmable error. If you use a desktop client instead of a browser for viewing emails, as I do oftentimes, then this issue might not be so apparent (till now).</p>

<p>I recently was witness to how Gmail handles email headers in regards to HTML v. text-only. Gmail’s SaaS actually only reads the latter MIME-type and throws away the rest. So if you have a text version being made available, and you want your emails to be seen strictly as HTML, you must render the HTML version in your code LAST. Here is a Ruby on Rails example:</p>

<p>``` ruby
class Notifier &lt; ActionMailer::Base
  include SendGrid
  default :from => Rails.configuration.sendgrid.reply_to
  sendgrid_enable :opentrack, :clicktrack, :ganalytics
  sendgrid_category :testing</p>

<p>  def user_updated(user)</p>

<pre><code>@user = user
mail( :to =&gt; @user.email, 
      :subject =&gt; "Your information has been updated.") do |format|
  format.text { "#{user.first_name},\n\nThis is an auto-response to inform you that your information has changed." }
  format.html { render :layout =&gt; 'autoresponse' }
end
</code></pre>

<p>  end
end
```</p>

<p>Super “thanks” go out to the <a href="http://sendgrid.tellapal.com/a/clk/1zzx0" title="SendGrid">SendGrid</a> crew for their constantly superior customer service skills and for helping me out on my way to becoming an email marketing specialist.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export Data as CSV]]></title>
    <link href="http://moorberry.net/blog/export-csv/"/>
    <updated>2011-11-14T15:15:00-06:00</updated>
    <id>http://moorberry.net/blog/export-csv</id>
    <content type="html"><![CDATA[<p>In my research I found a hundred and more different ways to manage the task of exporting data into a CSV file. Whenever I’m learning something new, on a new system or with a new language, I like to build the process myself from scratch. And being a minimalist programmer it just seems fitting. Enjoy</p>

<!--more-->


<p>``` ruby
def export_inverts
  require 'fastercsv'
  inverts  = Invert.all
  filename = params[:action] + ".csv"</p>

<p>  #this is required if you want this to work with IE
  if request.env['HTTP_USER_AGENT'] =~ /msie/i</p>

<pre><code>headers['Pragma'] = 'public'
headers["Content-type"] = "text/plain"
headers['Cache-Control'] = 'no-cache, must-revalidate, post-check=0, pre-check=0'
headers['Content-Disposition'] = "attachment; filename=\"#{filename}\""
headers['Expires'] = "0"
</code></pre>

<p>  else</p>

<pre><code>headers["Content-Type"] ||= 'text/csv'
headers["Content-Disposition"] = "attachment; filename=\"#{filename}\""
headers["Content-Transfer-Encoding"] = "binary"
</code></pre>

<p>  end</p>

<p>  csv_string = FasterCSV.generate do |csv|</p>

<pre><code>csv &lt;&lt; ["Genus","Species","Common Name","Pet Name","Gender"]
inverts.each do |i|
  csv &lt;&lt; [i.scientific_name,i.scientific_name,i.common_name,i.pet_name,i.gender]
end
</code></pre>

<p>  end
  render :text => csv_string
end
```</p>

<p>NOTE: <em>Developers using Ruby 1.8 &lt;= must install gem:fastercsv</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server vs Client]]></title>
    <link href="http://moorberry.net/blog/server-vs-client/"/>
    <updated>2010-03-25T21:11:00-05:00</updated>
    <id>http://moorberry.net/blog/server-vs-client</id>
    <content type="html"><![CDATA[<p>My presumption is that it’s because of the passionate advent of JQuery, that there has been an increasing rise of using Javascript, in precedence of a server side language like PHP or Ruby. This circumstance is arguably the sole cause to how and why, <em>mostly designers</em>, are simply not learning a better way. I’m here to enlighten you.</p>

<!--more-->


<p><a href="http://moorberry.net/images/posts/versus.jpg"><img src="http://moorberry.net/images/posts/versus.jpg" alt="Versus" /></a></p>

<p>In opening, I’d like to express, that I hold no animosity for Javascript. Actually I quite often fancy a touch of its elegant lure and almost regularly indulge my viewers with its properties to control aesthetics at a dynamic fashion. But it has its place. If PHP can serve the same purpose, than its obvious strengths, should not be taken for granted.</p>

<p>One prominent example of this that I seem to notice more often in use than others, is the  application of color alternating rows with HTML tables, or also favorably known as the “zebra” effect. Which I’ll be using for my reference material.</p>

<h2>PHP</h2>

<p>``` perl
for ($i = 1;$i &lt; 10;$i++) {</p>

<pre><code>if (($i % 2) == 0) {
    echo '&lt;tr class="zebra"&gt;';
} else {
    echo '&lt;tr&gt;';
}
</code></pre>

<p>}
```</p>

<p>The for() loop, does the accumulating work. It exponentially raises the default value ($i) by one, each iteration, so that the modulus operator (%) can equate the remainder of $i divided by two. So every instance of an even number represented by $i would evaluate to zero.</p>

<h2>Ruby on Rails</h2>

<p>``` ruby
&lt;% @items.each do |item| %>
  <tr class="<%= cycle("even", "odd") %>"></p>

<pre><code>&lt;!-- use item --&gt;
</code></pre>

<p>  </tr>
&lt;% end %>
```</p>

<h2>JQuery</h2>

<p>``` perl
$(document).ready(function(){</p>

<pre><code>$("tr:even").css("background-color", "#EFEFEF");
$("tr:odd").css("background-color", "#FFFFFF");
</code></pre>

<p>});
```</p>

<p>The JQuery even and odd filters are used as index selectors. This method can be used on any page element with just a little bit of reverse engineering.</p>

<h2>Discovering the Front-End</h2>

<p>If you were to analyze the speed of using only Javascript, you would find that it is 16% slower, compared to PHP [1]. Though that number might seem relatively low in scale, because it is, consider all of the other factors when developing for the web.</p>

<p>80% of the average user’s response time is spent on the front-end [2]. This time, is composed of downloading all of the elements necessary to make up the page (Images, libraries, scripts, stylesheets and more). Reducing the number of elements, in turn, reduces the number of HTTP requests required to render the page.</p>

<p>With PHP everything is rendered before any HTTP requests are sent by the server.</p>

<p><img src="https://chart.googleapis.com/chart?cht=bvs&chs=714x100&chd=t:13,20|87,80&chco=4d89f9,c6d9fd&chbh=20&chds=0,160" style="float:left;" /></p>

<br style="clear:both;" />


<p>Graphically interpreted above are the details associated with load times. This analysis completes the HTTP request cycle from initialization. The darker portion, of each representation, shows the percentage of work involved by the server. As consistency shows, a lot of web design and development, relies mostly on what’s being delivered to the browser.</p>

<p><em>in order of appearance: Google, PHP Rockstar</em></p>

<h2>Summary</h2>

<p>It’s certain that a professional web server is going to best the average home network set-up, in performance, any day. It’s your responsibility to take advantage of that, by running some server-side code, to save your guests the frustration of dealing with an idle load time.</p>

<h2>References</h2>

<p>[1] http://www.timestretch.com/FractalBenchmark.html<br/>
[2] http://developer.yahoo.net/blog/archives/2007/03/high_performanc.html</p>
]]></content>
  </entry>
  
</feed>
