<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Michael Minter]]></title>
  <link href="http://moorberry.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2012-10-30T11:31:12-05:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML Not Rendering in Gmail]]></title>
    <link href="http://moorberry.net/blog/html-not-rendering-in-gmail/"/>
    <updated>2011-12-10T12:52:00-06:00</updated>
    <id>http://moorberry.net/blog/html-not-rendering-in-gmail</id>
    <content type="html"><![CDATA[<p>I’ve been handling many of my company’s email campaigns for some time now and I can honestly say that it’s been pretty fun from a technical stand-point. There’s a lot that goes into email marketing (not including the marketing/sales implications). It has it’s own conventions, ideologies, and I believe to the utmost that there’s a larger future than presumed in store for the sometimes misunderstood technology. (I’m patiently waiting for a mobile device header-type.)</p>

<!--more-->




<div style="margin:0 auto 20px;width:940px;"><img src="http://moorberry.net/images/posts/sendgrid-banner.jpeg" title="SendGrid" alt="SendGrid" /></div>


<p>Recently I’ve been using my new skills while working on my own applications using <a href="http://sendgrid.tellapal.com/a/clk/1zzx0" title="SendGrid">SendGrid</a> as an alternative SMTP and email analytics tool. And I’ve only really come across one major programmable error. If you use a desktop client instead of a browser for viewing emails, as I do oftentimes, then this issue might not be so apparent (till now).</p>

<p>I recently was witness to how Gmail handles email headers in regards to HTML v. text-only. Gmail’s SaaS actually only reads the latter MIME-type and throws away the rest. So if you have a text version being made available, and you want your emails to be seen strictly as HTML, you must render the HTML version in your code LAST. Here is a Ruby on Rails example:</p>

<p>``` ruby
class Notifier &lt; ActionMailer::Base
  include SendGrid
  default :from => Rails.configuration.sendgrid.reply_to
  sendgrid_enable :opentrack, :clicktrack, :ganalytics
  sendgrid_category :testing</p>

<p>  def user_updated(user)</p>

<pre><code>@user = user
mail( :to =&gt; @user.email, 
      :subject =&gt; "Your information has been updated.") do |format|
  format.text { "#{user.first_name},\n\nThis is an auto-response to inform you that your information has changed." }
  format.html { render :layout =&gt; 'autoresponse' }
end
</code></pre>

<p>  end
end
```</p>

<p>Super “thanks” go out to the <a href="http://sendgrid.tellapal.com/a/clk/1zzx0" title="SendGrid">SendGrid</a> crew for their constantly superior customer service skills and for helping me out on my way to becoming an email marketing specialist.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export Data as CSV]]></title>
    <link href="http://moorberry.net/blog/export-csv/"/>
    <updated>2011-11-14T15:15:00-06:00</updated>
    <id>http://moorberry.net/blog/export-csv</id>
    <content type="html"><![CDATA[<p>In my research I found a hundred and more different ways to manage the task of exporting data into a CSV file. Whenever I’m learning something new, on a new system or with a new language, I like to build the process myself from scratch. And being a minimalist programmer it just seems fitting. Enjoy</p>

<!--more-->


<p>``` ruby
def export_inverts
  require 'fastercsv'
  inverts  = Invert.all
  filename = params[:action] + ".csv"</p>

<p>  #this is required if you want this to work with IE
  if request.env['HTTP_USER_AGENT'] =~ /msie/i</p>

<pre><code>headers['Pragma'] = 'public'
headers["Content-type"] = "text/plain"
headers['Cache-Control'] = 'no-cache, must-revalidate, post-check=0, pre-check=0'
headers['Content-Disposition'] = "attachment; filename=\"#{filename}\""
headers['Expires'] = "0"
</code></pre>

<p>  else</p>

<pre><code>headers["Content-Type"] ||= 'text/csv'
headers["Content-Disposition"] = "attachment; filename=\"#{filename}\""
headers["Content-Transfer-Encoding"] = "binary"
</code></pre>

<p>  end</p>

<p>  csv_string = FasterCSV.generate do |csv|</p>

<pre><code>csv &lt;&lt; ["Genus","Species","Common Name","Pet Name","Gender"]
inverts.each do |i|
  csv &lt;&lt; [i.scientific_name,i.scientific_name,i.common_name,i.pet_name,i.gender]
end
</code></pre>

<p>  end
  render :text => csv_string
end
```</p>

<p>NOTE: <em>Developers using Ruby 1.8 &lt;= must install gem:fastercsv</em></p>
]]></content>
  </entry>
  
</feed>
