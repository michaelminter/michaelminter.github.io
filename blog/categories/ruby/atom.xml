<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Michael Minter]]></title>
  <link href="http://moorberry.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2014-04-14T00:03:31-05:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 2 and acts_as_paranoid]]></title>
    <link href="http://moorberry.net/blog/rails-2-acts-as-paranoid/"/>
    <updated>2013-08-15T16:31:00-05:00</updated>
    <id>http://moorberry.net/blog/rails-2-acts-as-paranoid</id>
    <content type="html"><![CDATA[<p>Overrides some basic Active Record methods for the current model so that calling #destroy sets a <em>deleted_at</em> field to the current timestamp.</p>

<!-- more -->


<h2>Setup</h2>

<p><strong>Create migration file</strong></p>

<p>acts_as_paranoid, by default, assumes the table has a <em>deleted_at</em> date/time field.  Most normal model operations will work, but there will be some oddities.</p>

<p><code>
$ script/server generate migration deleted_at:datetime
</code></p>

<p>And then modify your migration file (app/db/migrations/000000000000_add_deleted_at…rb)to look something like:</p>

<p>``` ruby
class AddDeletedAtToWidgets &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>add_column :widgets, :deleted_at, :datetime, :null =&gt; true
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>remove_column :widgets, :deleted_at
</code></pre>

<p>  end
end
```</p>

<p><strong>Add the gem source to your Gemfile</strong> (app/Gemfile)</p>

<p><code>ruby
gem 'acts_as_paranoid', :git =&gt; 'git://github.com/technoweenie/acts_as_paranoid.git', :branch =&gt; 'integration_gem'
</code>
<strong>Run bundler</strong></p>

<p><code>
$ bundle install
</code>
<strong>Add the requestor to your model</strong> (app/models/widgets.rb)</p>

<p><code>ruby
class Widget &lt; ActiveRecord::Base
  acts_as_paranoid
end
</code></p>

<p>If you'd like to set a <strong>custom column for acts_as_paranoid</strong> just use the following options in your class method:</p>

<p><code>ruby
acts_as_paranoid :with =&gt; 'destroyed_at'
</code></p>

<h2>Use</h2>

<p>``` ruby
Widget.find(:all)</p>

<h1>=> SELECT * FROM widgets WHERE widgets.deleted_at IS NULL</h1>

<p>```</p>

<p>``` ruby
Widget.find(:first, :conditions => ['title = ?', 'test'], :order => 'title')</p>

<h1>=> SELECT * FROM widgets WHERE widgets.deleted_at IS NULL AND title = 'test' ORDER BY title LIMIT 1</h1>

<p>```</p>

<p>``` ruby
Widget.find_with_deleted(:all)</p>

<h1>=> SELECT * FROM widgets</h1>

<p>```</p>

<p>``` ruby
Widget.find(:all, :with_deleted => true)</p>

<h1>=> SELECT * FROM widgets</h1>

<p>```</p>

<p>``` ruby
Widget.find_with_deleted(1).deleted?</p>

<h1>=> Returns true if the record was previously destroyed, false if not</h1>

<p>```</p>

<p>``` ruby
Widget.count</p>

<h1>=> SELECT COUNT(*) FROM widgets WHERE widgets.deleted_at IS NULL</h1>

<p>```</p>

<p>``` ruby
Widget.count ['title = ?', 'test']</p>

<h1>=> SELECT COUNT(*) FROM widgets WHERE widgets.deleted_at IS NULL AND title = 'test'</h1>

<p>```</p>

<p>``` ruby
Widget.count_with_deleted</p>

<h1>=> SELECT COUNT(*) FROM widgets</h1>

<p>```</p>

<p>``` ruby
Widget.delete_all</p>

<h1>=> UPDATE widgets SET deleted_at = '2013-08-15 13:01:59'</h1>

<p>```</p>

<p>``` ruby
Widget.delete_all!</p>

<h1>=> DELETE FROM widgets</h1>

<p>```</p>

<p>``` ruby
@widget.destroy</p>

<h1>=> UPDATE widgets SET deleted_at = '2013-08-15 13:01:59' WHERE id = 1</h1>

<p>```</p>

<p>``` ruby
@widget.destroy!</p>

<h1>=> DELETE FROM widgets WHERE id = 1</h1>

<p>```</p>

<p>``` ruby
@widget.recover!</p>

<h1>=> UPDATE widgets SET deleted_at = NULL WHERE id = 1</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Eloquent Ruby]]></title>
    <link href="http://moorberry.net/blog/eloquent-ruby-book-review/"/>
    <updated>2013-04-06T16:00:00-05:00</updated>
    <id>http://moorberry.net/blog/eloquent-ruby-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/0321584104/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321584104&linkCode=as2&tag=moorberry-20" target="_blank">Eloquent Ruby</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0321584104" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" />
 is a book about the Ruby programming language that focuses on <strong>Ruby programming style</strong> by teaching you how to write your code as a real world hardened Rubyist.</p>

<!--more-->


<p><a href="http://www.amazon.com/gp/offer-listing/0321584104/ref=as_li_tf_il?ie=UTF8&camp=1789&creative=9325&creativeASIN=0321584104&linkCode=am2&tag=moorberry-20" target="_blank" style="float:left;">
  <img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&ASIN=0321584104&Format=_SL160_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=moorberry-20" style="display:inline-block;float:left;margin:0 10px 10px 0;" />
</a>
<img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0321584104" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;float:left;margin:0px !important;" /></p>

<p>Be prepared, <strong>this is an unconventional Ruby book</strong>. To use the author's, <a target="_blank" href="http://www.amazon.com/Russ-Olsen/e/B001JSCI5W/?_encoding=UTF8&camp=1789&creative=390957&linkCode=ur2&tag=moorberry-20">Russ Olsen</a><img src="https://www.assoc-amazon.com/e/ir?t=moorberry-20&l=ur2&o=1" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" />, own words</p>

<p>This is a book about making that final leap, about absorbing the Ruby programming culture, about becoming truly fluent in Ruby.</p>

<p>A formal understanding of the mechanics of Ruby isn’t the same as really looking at the programming world through Ruby-colored glasses. You need to absorb the cultural part of Ruby, to see how real Rubyists use the language to solve problems.</p>

<p>This is something I have been claiming for the last few years. Learning Ruby is not difficult. To start thinking in Ruby and becoming a Rubyist is the real challenge.</p>

<h2>Structure</h2>

<p>The book is divided into 4 parts. Each part is divided into chapters. The book counts 31 chapters and about 400 pages.</p>

<ol>
<li>The Basics</li>
<li>Classes, Modules, and Blocks</li>
<li>Metaprogramming</li>
<li>Pulling It All Together</li>
</ol>


<p>The first part covers some <strong>basic Ruby features</strong> in a way you normally won’t read in any other Ruby reference. Ah, if I only had the Symbol chapter available when I started learning Ruby!</p>

<p>The second part covers <strong>Classes, Modules and Blocks</strong> and it explains how to use modules successfully, how to deal with inheritance, equality and operators. This is by far my most favorite section of the book.</p>

<p>The third part is about <strong>Metaprogramming</strong>. Whilst the name of the section is technically correct, it can be misleading. If you are looking for a complete Ruby and Metaprogramming course, check out <a href="http://www.amazon.com/gp/product/1934356476/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1934356476&linkCode=as2&tag=moorberry-20" target="_blank">Metaprogramming Ruby: Program Like the Ruby Pros</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=1934356476" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" />
. This section covers common Ruby metaprogramming topic such as hooks, method_missing (a must read!) and monkey patching.</p>

<p>The fourth part wraps several topics all together and talks about <strong>creating and implementing a DSL</strong> in your Ruby applications.</p>

<p>The book ends with a <strong>rich list of references of Ruby and programming in general</strong>. The list contains amazing Ruby titles like <a href="http://www.amazon.com/gp/product/0596523009/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0596523009&linkCode=as2&tag=moorberry-20" target="_blank">Ruby Best Practices</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0596523009" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" />
 or <a href="http://www.amazon.com/gp/product/0672328844/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0672328844&linkCode=as2&tag=moorberry-20" target="_blank">The Ruby Way: Solutions and Techniques in Ruby Programming</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0672328844" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" />, as well programming masterpieces like <a href="http://www.amazon.com/gp/product/0070342075/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0070342075&linkCode=as2&tag=moorberry-20" target="_blank">The Elements of Programming Style</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0070342075" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" />. If you're looking for some inspiration for your next read, you're likely to find some there.</p>

<h2>Requirements</h2>

<p>This book assumes that you have a basic knowledge of the Ruby language. You don’t need to be a Ruby master, but some advanced sections such as Metaprogramming and DSL may require you to stop for a moment and refresh or improve your specific knowledge of Ruby on that topic.</p>

<p>Don’t expect this book to explain the basic details of Ruby or its syntax, this is behind the scope of this publication. There are plenty of commented examples, but if you want to learn about a specific Ruby feature make sure you keep a reference like <a href="http://www.amazon.com/gp/product/1934356085/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1934356085&linkCode=as2&tag=moorberry-20" target="_blank">Programming Ruby 1.9: The Pragmatic Programmers' Guide</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=1934356085" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" />
 or <a href="http://www.amazon.com/gp/product/0672328844/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0672328844&linkCode=as2&tag=moorberry-20" target="_blank">The Ruby Way: Solutions and Techniques in Ruby Programming</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0672328844" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" />
 handy.</p>

<p>Another requirement is that you must be ready to read printed source code: this book is full or Ruby code. At least 50% of the pages contain code, making this book a valuable practical reference.</p>

<h2>How was it?</h2>

<p><a href="http://www.amazon.com/gp/product/0321584104/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321584104&linkCode=as2&tag=moorberry-20" target="_blank">Eloquent Ruby</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0321584104" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" /> is a very lightweight and pleasant read. The colloquial tone is friendly and engrossing. The book has plenty of code snippets and requires only a few days to read it from beginning to end.</p>

<p>Aside from being an excellent resource to help you get thinking and programming <em>the Ruby way</em>, this book constantly adopts a practical approach providing tons of examples to read. Every chapter ends with an <em>In the Wild</em> section containing examples extracted from real Ruby libraries, and a <em>Wrapping up</em> section that helps you fix the concepts in mind.</p>

<p>I appreciated the focus on tests and the RSpec chapter. Most of the code examples are verified by tests, which are also made available in the book.</p>

<p>I found the Regular Expression chapter pretty boring and misplaced. In fact, it was the only chapter in the book where the main focus was teaching Regular Expression basics, instead of focusing on using Regular Expressions within the scope of <em>the Ruby way</em>.</p>

<p>I would have left the RubyGems section out of the book. There have been several changes in the Gems community in the past couple years and the chapter appears to be slightly outdated.</p>

<p>As a side note, I would have appreciated a wider usage of Ruby 1.9 over 1.8 in order to discourage the adoption of Ruby 1.8.</p>

<h2>Who should read it?</h2>

<p>If you are a beginner to intermediate level Ruby programmer, this book is a must read that will definitely help you improve your Ruby skill, by writing code <em>the Ruby way</em>.</p>

<p>If you are completely new to Ruby, I don’t recommend this book as a first reading. You might want to start with a Ruby reference to learn about programming in Ruby, then read <a href="http://www.amazon.com/gp/product/0321584104/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321584104&linkCode=as2&tag=moorberry-20" target="_blank">Eloquent Ruby</a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0321584104" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" /> to learn about programming <em>the Ruby way</em>.</p>

<p>If you are a Ruby expert and you have been writing Ruby for the last 5 years, don’t get over-confident. I’m quite sure the book will be able to provide you some valuable advice more than once.</p>

<h3>Buy the book</h3>

<p><a href="http://www.amazon.com/gp/product/0321584104/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321584104&linkCode=as2&tag=moorberry-20"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&ASIN=0321584104&Format=_SL110_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=moorberry-20" style="display:inline;margin:0;" /></a><img src="http://www.assoc-amazon.com/e/ir?t=moorberry-20&l=as2&o=1&a=0321584104" width="1" height="1" border="0" alt="" style="border:none !important;display:inline;margin:0px !important;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Special Notes Lookup in Rails]]></title>
    <link href="http://moorberry.net/blog/notes/"/>
    <updated>2012-11-06T17:52:00-06:00</updated>
    <id>http://moorberry.net/blog/notes</id>
    <content type="html"><![CDATA[<p>Add special notes to your source code comments in Rails to later remind you of tasks you need to complete:</p>

<!--more-->


<p>``` perl
class Article &lt; ActiveRecord::Base
  # TODO add named_scopes
  # FIXME method A is broken
  # OPTIMIZE improve the code</p>

<p>  has_many :comments
  ....
end
```</p>

<p>Some programming IDEs, such as <a href="http://www.aptana.com/" target="_blank">Aptana Studio 3</a> (free), will even highlight the key notation part.</p>

<p>Now, from the command line, you can list these special notes with a rake task:</p>

<p><code>html
$ rake notes
app/models/article.rb:
  * [2] [TODO] add named_scopes
  * [3] [FIXME] method A is broken
  * [4] [OPTIMIZE] improve the code
</code></p>

<p>You can also list notes of each kind individually with <code>rake notes:todo</code>, <code>rake notes:fixme</code> and <code>rake notes:optimize</code>.</p>

<p>You can even list your own, custom notes with <code>rake notes:custom ANNOTATION=MYANNO</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML Not Rendering in Gmail]]></title>
    <link href="http://moorberry.net/blog/html-not-rendering-in-gmail/"/>
    <updated>2011-12-10T12:52:00-06:00</updated>
    <id>http://moorberry.net/blog/html-not-rendering-in-gmail</id>
    <content type="html"><![CDATA[<p>I’ve been handling many of my company’s email campaigns for some time now and I can honestly say that it’s been pretty fun from a technical stand-point. There’s a lot that goes into email marketing (not including the marketing/sales implications). It has it’s own conventions, ideologies, and I believe to the utmost that there’s a larger future than presumed in store for the sometimes misunderstood technology. (I’m patiently waiting for a mobile device header-type.)</p>

<!--more-->


<p><img src="http://moorberry.net/images/posts/sendgrid-banner.jpeg" title="SendGrid" alt="SendGrid" style="width:100%;" /></p>

<p>Recently I’ve been using my new skills while working on my own applications using <a href="http://sendgrid.tellapal.com/a/clk/1zzx0" title="SendGrid">SendGrid</a> as an alternative SMTP and email analytics tool. And I’ve only really come across one major programmable error. If you use a desktop client instead of a browser for viewing emails, as I do oftentimes, then this issue might not be so apparent (till now).</p>

<p>I recently was witness to how Gmail handles email headers in regards to HTML v. text-only. Gmail’s SaaS actually only reads the latter MIME-type and throws away the rest. So if you have a text version being made available, and you want your emails to be seen strictly as HTML, you must render the HTML version in your code LAST. Here is a Ruby on Rails example:</p>

<p>``` ruby
class Notifier &lt; ActionMailer::Base
  include SendGrid
  default :from => Rails.configuration.sendgrid.reply_to
  sendgrid_enable :opentrack, :clicktrack, :ganalytics
  sendgrid_category :testing</p>

<p>  def user_updated(user)</p>

<pre><code>@user = user
mail( :to =&gt; @user.email, 
      :subject =&gt; "Your information has been updated.") do |format|
  format.text { "#{user.first_name},\n\nThis is an auto-response to inform you that your information has changed." }
  format.html { render :layout =&gt; 'autoresponse' }
end
</code></pre>

<p>  end
end
```</p>

<p>Super “thanks” go out to the <a href="http://sendgrid.tellapal.com/a/clk/1zzx0" title="SendGrid">SendGrid</a> crew for their constantly superior customer service skills and for helping me out on my way to becoming an email marketing specialist.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export Data as CSV]]></title>
    <link href="http://moorberry.net/blog/export-csv/"/>
    <updated>2011-11-14T15:15:00-06:00</updated>
    <id>http://moorberry.net/blog/export-csv</id>
    <content type="html"><![CDATA[<p>In my research I found a hundred and more different ways to manage the task of exporting data into a CSV file. Whenever I’m learning something new, on a new system or with a new language, I like to build the process myself from scratch. And being a minimalist programmer it just seems fitting. Enjoy</p>

<!--more-->


<p>``` ruby
def export_inverts
  require 'fastercsv'
  inverts  = Invert.all
  filename = params[:action] + ".csv"</p>

<p>  #this is required if you want this to work with IE
  if request.env['HTTP_USER_AGENT'] =~ /msie/i</p>

<pre><code>headers['Pragma'] = 'public'
headers["Content-type"] = "text/plain"
headers['Cache-Control'] = 'no-cache, must-revalidate, post-check=0, pre-check=0'
headers['Content-Disposition'] = "attachment; filename=\"#{filename}\""
headers['Expires'] = "0"
</code></pre>

<p>  else</p>

<pre><code>headers["Content-Type"] ||= 'text/csv'
headers["Content-Disposition"] = "attachment; filename=\"#{filename}\""
headers["Content-Transfer-Encoding"] = "binary"
</code></pre>

<p>  end</p>

<p>  csv_string = FasterCSV.generate do |csv|</p>

<pre><code>csv &lt;&lt; ["Genus","Species","Common Name","Pet Name","Gender"]
inverts.each do |i|
  csv &lt;&lt; [i.scientific_name,i.scientific_name,i.common_name,i.pet_name,i.gender]
end
</code></pre>

<p>  end
  render :text => csv_string
end
```</p>

<p>NOTE: <em>Developers using Ruby 1.8 &lt;= must install gem:fastercsv</em></p>
]]></content>
  </entry>
  
</feed>
