<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Data | Moorberry]]></title>
  <link href="http://moorberry.net/blog/categories/data/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2014-07-30T13:31:51-05:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Postgres: Search and Sort by Radial Distance]]></title>
    <link href="http://moorberry.net/blog/postgres-search-distance/"/>
    <updated>2013-12-11T13:01:00-06:00</updated>
    <id>http://moorberry.net/blog/postgres-search-distance</id>
    <content type="html"><![CDATA[<p>Request users by radial distance and sort by nearest to farthest, vice versa, or whatever other attributes you'd like to include.</p>

<!-- more -->


<p>Searching for a user by distance, in your database, is easy with <strong>Postgres</strong>. Just create a users table with, at minimum, columns named <em>latitude</em> and <em>longitude</em>.</p>

<h2>Data</h2>

<p><code>bash
postgres=# SELECT * FROM users;
+----+------+----------+-----------+
| id | name | latitude | longitude |
+----+------+----------+-----------+
</code></p>

<h2>SQL</h2>

<p><code>sql
SELECT name, distance
FROM
( SELECT name, ((ACOS(SIN(#{latitude} * PI() / 180) * SIN(u.latitude * PI() / 180) + COS(#{latitude} * PI() / 180) * COS(u.latitude * PI() / 180) * COS((#{longitude} - u.longitude) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) as distance
FROM users u ) d
WHERE distance &lt;= 5
ORDER BY distance ASC;
</code></p>

<p>Matches all users <code>WHERE distance &lt;= 5</code> (less than or equal to five <strong>miles</strong>).</p>

<p>To change the distance to kilometers&mdash;multiply the output number by 1.609344 (1 mile == 1.609344 kilometers).</p>

<p>Replace <code>#{latitude}</code> with the value for the latitude you want to match against the database and do the same for <code>#{longitude}</code></p>

<p>This will work in any SQL relational database, including <strong>MySQL</strong> and <strong>Oracle</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSV Special Character]]></title>
    <link href="http://moorberry.net/blog/csv-special-character/"/>
    <updated>2013-10-08T23:52:00-05:00</updated>
    <id>http://moorberry.net/blog/csv-special-character</id>
    <content type="html"><![CDATA[<p>Separate CSV data with a special character (example: thorn &thorn;).</p>

<!-- more -->


<p><strong>Google DFP</strong> (Double-click for Publishers) uses a special character in their CSV exports. Specifically the thorn character and it's a pain. But Ruby can make it better.</p>

<p>You can skip to the bottom of this article for the neccessary code or read on from here for more details about figuring out the path to certainty.</p>

<h2>Unicode</h2>

<p>Find the unicode character. For my example the thorn character <strong>&thorn;</strong> is represented as <strong>u00FE</strong>.</p>

<h3>List Encoding Types available to Ruby 2</h3>

<p><code>bash
2.0.0p0 :001 &gt; Encoding.name_list
 =&gt; ["ASCII-8BIT", "UTF-8", "US-ASCII", "Big5", "Big5-HKSCS", "Big5-UAO", "CP949", "Emacs-Mule", "EUC-JP", "EUC-KR", "EUC-TW", "GB18030", "GBK", "ISO-8859-1", "ISO-8859-2", "ISO-8859-3", "ISO-8859-4", "ISO-8859-5", "ISO-8859-6", "ISO-8859-7", "ISO-8859-8", "ISO-8859-9", "ISO-8859-10", "ISO-8859-11", "ISO-8859-13", "ISO-8859-14", "ISO-8859-15", "ISO-8859-16", "KOI8-R", "KOI8-U", "Shift_JIS", "UTF-16BE", "UTF-16LE", "UTF-32BE", "UTF-32LE", "Windows-31J", "Windows-1251", "BINARY", "IBM437", "CP437", "IBM737", "CP737", "IBM775", "CP775", "CP850", "IBM850", "IBM852", "CP852", "IBM855", "CP855", "IBM857", "CP857", "IBM860", "CP860", "IBM861", "CP861", "IBM862", "CP862", "IBM863", "CP863", "IBM864", "CP864", "IBM865", "CP865", "IBM866", "CP866", "IBM869", "CP869", "Windows-1258", "CP1258", "GB1988", "macCentEuro", "macCroatian", "macCyrillic", "macGreek", "macIceland", "macRoman", "macRomania", "macThai", "macTurkish", "macUkraine", "CP950", "Big5-HKSCS:2008", "CP951", "stateless-ISO-2022-JP", "eucJP", "eucJP-ms", "euc-jp-ms", "CP51932", "EUC-JP-2004", "EUC-JISX0213", "eucKR", "eucTW", "GB2312", "EUC-CN", "eucCN", "GB12345", "CP936", "ISO-2022-JP", "ISO2022-JP", "ISO-2022-JP-2", "ISO2022-JP2", "CP50220", "CP50221", "ISO8859-1", "Windows-1252", "CP1252", "ISO8859-2", "Windows-1250", "CP1250", "ISO8859-3", "ISO8859-4", "ISO8859-5", "ISO8859-6", "Windows-1256", "CP1256", "ISO8859-7", "Windows-1253", "CP1253", "ISO8859-8", "Windows-1255", "CP1255", "ISO8859-9", "Windows-1254", "CP1254", "ISO8859-10", "ISO8859-11", "TIS-620", "Windows-874", "CP874", "ISO8859-13", "Windows-1257", "CP1257", "ISO8859-14", "ISO8859-15", "ISO8859-16", "CP878", "MacJapanese", "MacJapan", "ASCII", "ANSI_X3.4-1968", "646", "UTF-7", "CP65000", "CP65001", "UTF8-MAC", "UTF-8-MAC", "UTF-8-HFS", "UTF-16", "UTF-32", "UCS-2BE", "UCS-4BE", "UCS-4LE", "CP932", "csWindows31J", "SJIS", "PCK", "CP1251", "UTF8-DoCoMo", "SJIS-DoCoMo", "UTF8-KDDI", "SJIS-KDDI", "ISO-2022-JP-KDDI", "stateless-ISO-2022-JP-KDDI", "UTF8-SoftBank", "SJIS-SoftBank", "locale", "external", "filesystem", "internal"]
</code></p>

<h3>Determine Encoding Type</h3>

<p>```ruby
Encoding.name_list.each do |encoding|
  CSV.foreach(file_path, { encoding:encoding, :col_sep => "\u00FE" }) do |row|</p>

<pre><code>puts "===== #{encoding} ====="
puts row.inspect
break
</code></pre>

<p>  end
end
```</p>

<h3>Use Thorn as Delimiter in CSV</h3>

<p><code>ruby
CSV.foreach(file_path, { encoding:'ISO-8859-1', :col_sep =&gt; "\u00FE" }) do |row|
  # your code here
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenOffice: Merge and Sort Data]]></title>
    <link href="http://moorberry.net/blog/openoffice-merge-and-sort-data/"/>
    <updated>2013-05-14T22:55:00-05:00</updated>
    <id>http://moorberry.net/blog/openoffice-merge-and-sort-data</id>
    <content type="html"><![CDATA[<p>You need to <strong>construct an array using a list of pre-existing values</strong> but firstly have to <strong>sort the order</strong> of that list.</p>

<!--more-->


<p>There are plenty of alternatives but I enjoy using <a href="http://www.openoffice.org/" target="_blank" title="OpenOffice"><strong>OpenOffice</strong></a> for these simple string inclusions.</p>

<p>OpenOffice is <strong>open source</strong> and available for use on <strong>all major operating systems</strong>.</p>

<!--## Let's Get Started-->


<h3>Collect Data</h3>

<p>Copy your list of values.</p>

<p>Select the top cell in the column you want your list to reside.</p>

<p><em>When you paste the values in OpenOffice, as long as they're separated by a line break, OpenOffice will automatically separate each value into a new row of whichever column you've designated.</em></p>

<h3>Sort</h3>

<p>Sort the list by hilighting the data and perform the following:</p>

<p><code>Data &gt; Sort &gt; Options</code></p>

<p>Unselect the checkbox labeled "<em>Range contains column labels.</em>"</p>

<p>Click <code>OK</code></p>

<p><em>This option prevents column headers from being sorted with the rest of the data. Since we don't have any column headers, like in a CSV file, we need to deactivate this feature.</em></p>

<p><img src="http://moorberry.net/images/posts/openoffice-1.jpg" alt="OpenOffice" width="100%" /></p>

<h3>Prepare</h3>

<p>Create the prepending or appending content at the top of the column to the left or right of the working list.</p>

<p>Point your cursor to the bottom-right corner of the cell you just filled, hold down your left mouse button, and move downwards to the bottom of the working column.</p>

<p><em>This action will copy the active cell to all of the other cells touched by your hover action. Do this over again for further columns.</em></p>

<h3>Merge</h3>

<p>Use the following Calc function in the column that you want the new data to be returned.</p>

<blockquote><p><a href="http://wiki.openoffice.org/wiki/Documentation/How_Tos/Calc:_CONCATENATE_function" target="_blank" alt="CONCATENATE Documentation"><strong>Concatenate</strong></a>: Combines several text strings into one string.</p></blockquote>

<p><code>
=CONCATENATE( A1; ":"; B1; ":"; C1 )
</code></p>

<p>or you can use the simple version:</p>

<p><code>
= A1 &amp; ":" &amp; B1 &amp; ":" &amp; C1
</code></p>

<p><img src="http://moorberry.net/images/posts/openoffice-2.jpg" alt="OpenOffice" width="100%" /></p>

<p>Where cell <strong>A1</strong> contains <code>"</code>, cell <strong>B1</strong> contains <code>actionmailer</code>, and cell <strong>C1</strong> contains <code>",</code> returns <code>"actionamailer",</code>.</p>

<p>Hit <code>return</code></p>

<p>Just like when you copied the prep data, grab the bottom-right corner of the working cell and drag it directly down to the target end point.</p>

<p><em>This will copy the concatenation function across all of the modified cells. So if you change a value in another column, from its row, OpenOffice will generate new content for the concatenated cell.</em></p>

<p>Your column is now ready for inclusion in production-ready code. Just highlight the readied cells, copy, and paste into your program editor of choice.</p>

<h3>Further Reading</h3>

<p>When you paste the new column into your text editor you might notice special quotes that OpenOffice magicly replaces upon creation. You can disable the automatic conversion of ASCII "straight" quotes into typographic “curly” quotes by going to:</p>

<p><code>Tools &gt; AutoCorrect Options &gt; Localized Options</code></p>

<p>Scan down to the container marked "Double Quotes" and make sure the checkbox labeled "Replace" is unchecked.</p>

<p>Click <code>OK</code></p>

<p><img src="http://moorberry.net/images/posts/openoffice-3.jpg" alt="OpenOffice" width="100%" /></p>
]]></content>
  </entry>
  
</feed>
