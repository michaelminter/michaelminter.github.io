<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | Moorberry Solutions]]></title>
  <link href="http://moorberry.net/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2013-12-11T22:01:55-06:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Send Text Message Through Email]]></title>
    <link href="http://moorberry.net/blog/send-text-message-through-email/"/>
    <updated>2013-03-27T17:20:00-05:00</updated>
    <id>http://moorberry.net/blog/send-text-message-through-email</id>
    <content type="html"><![CDATA[<p>If you'd like to send a TXT message through email rather than use a SaaS application, such as <a href="http://twilio.com" target="_blank" alt="Twilio" title="Twilio">Twilio</a>, you can send SMS messages through SMTP.</p>

<!--more-->


<p>Below is a list of some common gateway email handlers to turn emails into TXTs. Just switch out the default phone number for the one you want to communicate with:</p>

<p><strong>AT&amp;T</strong><br/>
1234567890@txt.att.net</p>

<p><strong>Metro PCS</strong><br/>
1234567890@mymetropcs.com</p>

<p><strong>T-Mobile</strong><br/>
1234567890@tmomail.net</p>

<p><strong>U.S. Cellular</strong><br/>
1234567890@email.uscc.net</p>

<p><strong>Cricket Wireless</strong><br/>
1234567890@sms.mycricket.com</p>

<p><strong>Sprint</strong><br/>
1234567890@messaging.sprintpcs.com</p>

<p><strong>TracFone</strong><br/>
1234567890@mmst5.tracfone.com</p>

<p><strong>Verizon</strong><br/>
1234567890@vtext.com</p>

<p><em>If you know any handlers I haven't included, please leave a note in the comments section below, and I'll update the above list as soon as possible. Thanks</em></p>

<p>Some caveats to this transaction method:</p>

<ul>
<li>All mobile carriers format the message to their own liking. Some just include the sender's email address, while other carriers will return the entire email header (which can be quite costly to small viewing areas.)</li>
<li>You'll have to know which subscriber your target is using. But use a service like <a href="http://twilio.com" target="_blank" alt="Twilio" title="Twilio" style="color:red;">Twilio</a> and you don't need to know how you're sending the message &mdash; Just so long as you use a valid phone number.</li>
</ul>


<p>&nbsp;</p>

<h2>Twilio</h2>

<p><img src="http://moorberry.net/images/posts/twilio.jpg" alt="Twilio Logo" title="Twilio Logo" /></p>

<p>Try out <a href="http://twilio.com" target="_blank" alt="Twilio" title="Twilio" style="color:red;">Twilio</a>. They offer a <a href="http://twilio.com" target="_blank" alt="Twilio Free Plan" title="Twilio Free Plan" style="color:red;font-weight:bold;">free plan</a> that includes 200 messages to send each month and maintains a series of APIs that are <a href="http://www.twilio.com/blog/2012/02/adding-twilio-sms-messaging-to-your-rails-app.html" target="_blank" alt="Adding Twilio SMS Messaging to your Rails App" title="Adding Twilio SMS Messaging to your Rails App">easy to use</a> and <a href="https://github.com/twilio" target="_blank" alt="Twilio Github" title="Github Twilio">open source</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Your Heroku Dyno Awake]]></title>
    <link href="http://moorberry.net/blog/heroku-dyno-ping/"/>
    <updated>2012-09-20T16:23:00-05:00</updated>
    <id>http://moorberry.net/blog/heroku-dyno-ping</id>
    <content type="html"><![CDATA[<p>Apps that have scaled the number of web dynos (dynos running the web process type) so that only a single web dyno is running, will have that web dyno idled out after one hour of inactivity. When this happens, you’ll see the following in your logs:</p>

<!--more-->


<pre><code>2011-05-30T19:11:09+00:00 heroku[web.1]: Idling
2011-05-30T19:11:17+00:00 heroku[web.1]: Stopping process with SIGTERM
</code></pre>

<p>When you access the app in your web browser or by some other means of sending an HTTP request, the routing mesh will signal the dyno manifold to unidle (or "wake up") your dyno to run the web process type:</p>

<pre><code>2011-05-30T22:17:43+00:00 heroku[web.1]: Unidling
2011-05-30T22:17:43+00:00 heroku[web.1]: State changed from created to starting
</code></pre>

<p>This causes a few second delay for this first request. Subsequent requests will perform normally.</p>

<p><em>Apps that have more than 1 web dyno running are never idled out. Workers dynos are never idled out.</em></p>

<h2>The Good News</h2>

<p>Overcome this nuisance by touching the site at least every hour so that the dyno doesn't have time to begin idling.</p>

<p><img src="http://moorberry.net/images/posts/console_ping.png" alt="console preview" style="width:100%;" /></p>

<p>You can sign up for a service provider, <strong>free</strong> at <a href="http://pingdom.com" target="_blank" style="font-weight:bold;">Pingdom</a>, that will ping your application at designated intervals.</p>

<p><strong>Ping</strong> is a network protocol that sends ICMP <em>echo request</em> packets to the target host and waits for a response.</p>

<p><a href="http://pingdom.com" target="_blank"><img src="http://moorberry.net/images/posts/pingdom_dashboard.png" alt="Pingdom" style="width:100%;" /></a></p>

<p><a href="http://pingdom.com" target="_blank" style="font-weight:bold;">Pingdom</a> is loaded with features; including availability to a public page to view when the last time your host was checked, alerts via email or SMS, and many other features.</p>

<p><a href="http://pingdom.com" target="_blank"><img src="http://moorberry.net/images/posts/pingdom_public.png" style="border:none;" alt="Pingdom" style="width:100%;" /></a></p>

<p>I chose to sample <a href="http://pingdom.com" target="_blank" style="font-weight:bold;">Pingdom</a> because it affords the least amount of work in setting up at a free price. Please post any alternatives you can think of in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML Not Rendering in Gmail]]></title>
    <link href="http://moorberry.net/blog/html-not-rendering-in-gmail/"/>
    <updated>2011-12-10T12:52:00-06:00</updated>
    <id>http://moorberry.net/blog/html-not-rendering-in-gmail</id>
    <content type="html"><![CDATA[<p>I’ve been handling many of my company’s email campaigns for some time now and I can honestly say that it’s been pretty fun from a technical stand-point. There’s a lot that goes into email marketing (not including the marketing/sales implications). It has it’s own conventions, ideologies, and I believe to the utmost that there’s a larger future than presumed in store for the sometimes misunderstood technology. (I’m patiently waiting for a mobile device header-type.)</p>

<!--more-->


<p><img src="http://moorberry.net/images/posts/sendgrid-banner.jpeg" title="SendGrid" alt="SendGrid" style="width:100%;" /></p>

<p>Recently I’ve been using my new skills while working on my own applications using <a href="http://sendgrid.tellapal.com/a/clk/1zzx0" title="SendGrid">SendGrid</a> as an alternative SMTP and email analytics tool. And I’ve only really come across one major programmable error. If you use a desktop client instead of a browser for viewing emails, as I do oftentimes, then this issue might not be so apparent (till now).</p>

<p>I recently was witness to how Gmail handles email headers in regards to HTML v. text-only. Gmail’s SaaS actually only reads the latter MIME-type and throws away the rest. So if you have a text version being made available, and you want your emails to be seen strictly as HTML, you must render the HTML version in your code LAST. Here is a Ruby on Rails example:</p>

<p>``` ruby
class Notifier &lt; ActionMailer::Base
  include SendGrid
  default :from => Rails.configuration.sendgrid.reply_to
  sendgrid_enable :opentrack, :clicktrack, :ganalytics
  sendgrid_category :testing</p>

<p>  def user_updated(user)</p>

<pre><code>@user = user
mail( :to =&gt; @user.email, 
      :subject =&gt; "Your information has been updated.") do |format|
  format.text { "#{user.first_name},\n\nThis is an auto-response to inform you that your information has changed." }
  format.html { render :layout =&gt; 'autoresponse' }
end
</code></pre>

<p>  end
end
```</p>

<p>Super “thanks” go out to the <a href="http://sendgrid.tellapal.com/a/clk/1zzx0" title="SendGrid">SendGrid</a> crew for their constantly superior customer service skills and for helping me out on my way to becoming an email marketing specialist.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paypal Express Checkout NVP API]]></title>
    <link href="http://moorberry.net/blog/paypal-express-checkout-nvp-api/"/>
    <updated>2010-04-03T20:19:00-05:00</updated>
    <id>http://moorberry.net/blog/paypal-express-checkout-nvp-api</id>
    <content type="html"><![CDATA[<p>I'm not sure why <a href="http://paypal.com">Paypal</a> has written documentation, regarding its own Express Checkout name-value-pair API, with no enthusiasm at all. The classes used with the Paypal API are extremely easy to use. All of this is likely contributing to the confusion about using Express Checkout. But I’m here now, to save your application, and hopefully your sanity.</p>

<!--more-->




<div style="margin:0 auto 20px;width:600px;"><img src="http://moorberry.net/images/posts/checkout01.jpg" title="SendGrid" alt="SendGrid" width="100%" /></div>


<p>I’m going to explain why the API objects work and what happens when they’re called. There’s a few different ways that you could go about setting up the product and/or service details. So I’ll keep this post relative to the main focus points and let you handle the before and after parts on an individual basis.</p>

<h2>Referring payment authentication</h2>

<p><code>perl
$paypal = new SetExpressCheckout($totalPrice);
</code></p>

<p>We start out by calling the <strong>SetExpressCheckOut()</strong> class. This class caller instantiates the method you’ll use to set up the parameters required for redirecting the customer <em>to</em> Paypal <em>and back</em>. A variable of the total price has to be set to complete the initiation of this class.</p>

<p>``` perl
$paypal = new SetExpressCheckout($totalPrice);</p>

<p>$paypal->setNVP("RETURNURL", "http://yourURL.com/confirm.php");
$paypal->setNVP("HDRIMG", "http://yourURL.com/image.jpg");
$paypal->setNVP("EMAIL", "$userEmail"); // customer's email
$paypal->setNVP("AMT", $totalPrice);
$paypal->setNVP("SHIPPINGAMT", "32");
$paypal->setNVP("CUSTOM", "Anything you want to put");
$paypal->setNVP("INVNUM", $uniqueID); // personal invoice number</p>

<p>$paypal->getResponse();
```</p>

<p>Before you submit for a transfer to Paypal, know that there are optional values you can send with the setNVP() function, to customize the payment process. All values that can be found, by default, in the etc/NVP/SetExpressCheckout.ini file. I’ve included a list of common practice examples and how to use them in this template.</p>

<p>getResponse() sends the user’s browser to Paypal for authentication of credit information. Specifically to a URL that you’ll have to variably set between test mode (sandbox) and live, in the file named etc/NVP/PayPalNVP.ini.</p>

<div style="margin:0 auto 20px;width:600px;"><img src="http://moorberry.net/images/posts/checkout02.jpg" title="SendGrid" alt="SendGrid" width="100%" /></div>


<h2>Completing the Sale</h2>

<p><code>perl
$paypal  = new GetExpressCheckoutDetails;
$details = $paypal-&gt;getResponse();
</code></p>

<p><strong>GetExpressCheckoutDetails()</strong> is a class that is most responsible for presenting the custom specifications that you originally sent with SetExpressCheckOut() and SetNVP().</p>

<p><strong>getResponse()</strong> will gather all of the available options as an array, labelled $details.</p>

<p><code>perl
$payment  = new DoExpressCheckoutPayment($totalPrice);
$response = $payment-&gt;getResponse();
</code></p>

<p><strong>DoExpressCheckoutPayment()</strong> will instinctively initiate a communication with Paypal to notify the service that you are ready for the payment to be transferred to your account. The only necessary requisite, of calling this class and it calling to action, is to include the total price in its variable containment field.</p>

<p><strong>getResponse()</strong> will gather the resulting responses by DoExpressCheckoutPayment() and include them in an array, labelled $response.</p>

<p>It could be said that you could apply another (final) verification for your customer to submit before the transaction is completed by DoExpressCheckoutPayment(). But not technically necessary.</p>

<p>``` perl
if ($response['PAYMENTSTATUS'] == 'Completed') {</p>

<pre><code># process information
</code></pre>

<p>}
```</p>

<p>One of the returned values in $response will be the PAYMENTSTATUS key. This is a string result that confirms whether or not the money has made been payed to your account. It will definitely be useful when you set up your system to print an invoice on complete, or some insightfully-formatted summary on failure.</p>

<h2>Displaying results from getResponse</h2>

<p>``` perl
echo '<pre>';
print_r($details);
echo '<pre>';
print_r($response);</p>

<h1>The above code should print out something similar to the following:</h1>

<p>Array
(</p>

<pre><code>[TOKEN] =&gt; EC%2d8DS53628GJ4630109
[TIMESTAMP] =&gt; 2010%2d03%2d31T08%3a25%3a40Z
[CORRELATIONID] =&gt; ce3e460d38d2f
[ACK] =&gt; Success
[VERSION] =&gt; 51%2e0
[BUILD] =&gt; 1247606
[EMAIL] =&gt; test_acct_36654645742_per%40domain%2ecom
[PAYERID] =&gt; W96GXTA5P9BRN
[PAYERSTATUS] =&gt; verified
[FIRSTNAME] =&gt; Test
[LASTNAME] =&gt; User
[COUNTRYCODE] =&gt; US
[SHIPTONAME] =&gt; Test%20User
[SHIPTOSTREET] =&gt; 1%20Main%20St
[SHIPTOCITY] =&gt; San%20Jose
[SHIPTOSTATE] =&gt; CA
[SHIPTOZIP] =&gt; 95131
[SHIPTOCOUNTRYCODE] =&gt; US
[SHIPTOCOUNTRYNAME] =&gt; United%20States
[ADDRESSSTATUS] =&gt; Confirmed
[CUSTOM] =&gt; Anything you want to put
[INVNUM] =&gt; IYUUFEOAS0ME3MTI
</code></pre>

<p>)
Array
(</p>

<pre><code>[TOKEN] =&gt; EC%2d8DS53628GJ4630109
[TIMESTAMP] =&gt; 2010%2d03%2d31T08%3a25%3a43Z
[CORRELATIONID] =&gt; b1989df39a0ca
[ACK] =&gt; Success
[VERSION] =&gt; 51%2e0
[BUILD] =&gt; 1247606
[TRANSACTIONID] =&gt; 1PR0061154034542X
[TRANSACTIONTYPE] =&gt; expresscheckout
[PAYMENTTYPE] =&gt; instant
[ORDERTIME] =&gt; 2010%2d03%2d31T08%3a25%3a42Z
[AMT] =&gt; 152%2e00
[FEEAMT] =&gt; 4%2e71
[TAXAMT] =&gt; 0%2e00
[CURRENCYCODE] =&gt; USD
[PAYMENTSTATUS] =&gt; Completed
[PENDINGREASON] =&gt; None
[REASONCODE] =&gt; None
</code></pre>

<p>)
```</p>

<h2>Testing</h2>

<p>If you don’t have a <a href="https://developer.paypal.com/">Paypal developer account</a>, than you should certainly sign up for one to use Paypal’s Sandbox, which makes a mock version of Paypal available for testing. Comes complete with personal and business accounts, each with their own credentials, and unlimited funds.</p>

<h2>Summary</h2>

<p>Follow the preceding order and you could easily narrow this code down to a a single file, with enough if() constructs, or span it out to many.</p>

<p>You might be left wondering why it seems less daunting than you have expected. That would be because you’re right. These few objects are all that’s needed to handle a shopping cart system on your website.</p>

<p>Maybe Paypal will use this post to refer new users trying to understand how this system works. But I doubt it.</p>

<h3>Note</h3>

<p>Don't forget to adjust your database schema for <em>address2</em> in <strong>$details</strong> when available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Flickr Gallery]]></title>
    <link href="http://moorberry.net/blog/php-flickr-gallery/"/>
    <updated>2010-03-24T15:23:00-05:00</updated>
    <id>http://moorberry.net/blog/php-flickr-gallery</id>
    <content type="html"><![CDATA[<p>In my search for finding a simple solution to any problem, I usually cross many and many blogs and articles, discussing whatever topic. But with so much detail that the solution becomes a problem in itself. So I often times end up resolved to research on my own. In this case, I share the simplest programming method for displaying a <a href="http://flickr.com" title="Flickr">Flickr</a> gallery, with PHP.</p>

<!--more-->


<h2>Assembling Your Variables</h2>

<p>``` perl
$api_key  = 'cr79h3t7g387ghc3fh7338ch87c3ch734';
$user_id  = '33822702%40N08';
$per_page = 10;</p>

<p>$xml      = 'http://api.flickr.com/services/rest/?method=flickr.people.getPublicPhotos&amp;api_key='.$api_key.'&amp;user_id='.$user_id.'&amp;per_page='.$per_page;</p>

<p>$flickr   = simplexml_load_file($xml);
foreach($flickr->photos->photo as $p) {</p>

<pre><code>echo '&lt;a href="http://www.flickr.com/photos/'.$p['owner'].'/'.$p['id'].'"&gt;';
echo '&lt;img src="http://farm'.$p['farm'].'.static.flickr.com/'.$p['server'].'/'.$p['id'].'_'.$p['secret'].'_s.jpg"&gt;';
echo '&lt;/a&gt;';
</code></pre>

<p>}
```</p>

<p><strong>$api_key</strong> is part of an authentication device that allows your server and Flickr to “shake hands” sort of speak. <a href="http://www.flickr.com/services/api/keys/" title="Flickr API Key">You can get your Flickr API key here</a>.</p>

<p><strong>$user_id</strong> is how Flickr identifies you. This value can be found in the URL of your Flickr “photostream”. <a href="http://www.flickr.com/photos/33822702@N08/" title="Michael Minter's Flickr">Here's mine for reference</a>.</p>

<p><strong>$per_page</strong> refers to how many photos will be retrieved from your photostream. Though this limiter is optional, the default count is, “all”. Which means if you have 1,000 plus photos, it could be a very bad thing, for your viewer’s browser load time.</p>

<p><strong>$xml</strong> is a link to the webfile that renders a list of your available photos based on previously noted variables. This line can be modified later to include even more search parameters. (see: below)</p>

<p><strong>$flickr</strong> uses a PHP function called, <a href="http://php.net/manual/en/function.simplexml-load-file.php" title="simplexml_load_file function">simplexml_load_file()</a>, which parses an XML file into an object.</p>

<p>In today's lesson, <strong>$flickr</strong> becomes an array and we use <a href="http://us2.php.net/manual/en/control-structures.foreach.php" title="foreach function">foreach()</a> to extract the values we need, to display the gallery.</p>

<h2>Summary</h2>

<p>This method is just what I needed. Something small, easily accessible, and scalable. As you experiment with this script, you’ll be afforded the opportunity to use many different features of the API, which Flickr offers. <a href="http://www.flickr.com/services/api/" title="Flickr API Index">Click here to view a full list.</a></p>
]]></content>
  </entry>
  
</feed>
