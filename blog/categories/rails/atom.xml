<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Moorberry]]></title>
  <link href="http://moorberry.net/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2014-07-30T13:31:51-05:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 2 and acts_as_paranoid]]></title>
    <link href="http://moorberry.net/blog/rails-2-acts-as-paranoid/"/>
    <updated>2013-08-15T16:31:00-05:00</updated>
    <id>http://moorberry.net/blog/rails-2-acts-as-paranoid</id>
    <content type="html"><![CDATA[<p>Overrides some basic Active Record methods for the current model so that calling #destroy sets a <em>deleted_at</em> field to the current timestamp.</p>

<!-- more -->


<h2>Setup</h2>

<p><strong>Create migration file</strong></p>

<p>acts_as_paranoid, by default, assumes the table has a <em>deleted_at</em> date/time field.  Most normal model operations will work, but there will be some oddities.</p>

<p><code>
$ script/server generate migration deleted_at:datetime
</code></p>

<p>And then modify your migration file (app/db/migrations/000000000000_add_deleted_atâ€¦rb)to look something like:</p>

<p>``` ruby
class AddDeletedAtToWidgets &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>add_column :widgets, :deleted_at, :datetime, :null =&gt; true
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>remove_column :widgets, :deleted_at
</code></pre>

<p>  end
end
```</p>

<p><strong>Add the gem source to your Gemfile</strong> (app/Gemfile)</p>

<p><code>ruby
gem 'acts_as_paranoid', :git =&gt; 'git://github.com/technoweenie/acts_as_paranoid.git', :branch =&gt; 'integration_gem'
</code>
<strong>Run bundler</strong></p>

<p><code>
$ bundle install
</code>
<strong>Add the requestor to your model</strong> (app/models/widgets.rb)</p>

<p><code>ruby
class Widget &lt; ActiveRecord::Base
  acts_as_paranoid
end
</code></p>

<p>If you'd like to set a <strong>custom column for acts_as_paranoid</strong> just use the following options in your class method:</p>

<p><code>ruby
acts_as_paranoid :with =&gt; 'destroyed_at'
</code></p>

<h2>Use</h2>

<p>``` ruby
Widget.find(:all)</p>

<h1>=> SELECT * FROM widgets WHERE widgets.deleted_at IS NULL</h1>

<p>```</p>

<p>``` ruby
Widget.find(:first, :conditions => ['title = ?', 'test'], :order => 'title')</p>

<h1>=> SELECT * FROM widgets WHERE widgets.deleted_at IS NULL AND title = 'test' ORDER BY title LIMIT 1</h1>

<p>```</p>

<p>``` ruby
Widget.find_with_deleted(:all)</p>

<h1>=> SELECT * FROM widgets</h1>

<p>```</p>

<p>``` ruby
Widget.find(:all, :with_deleted => true)</p>

<h1>=> SELECT * FROM widgets</h1>

<p>```</p>

<p>``` ruby
Widget.find_with_deleted(1).deleted?</p>

<h1>=> Returns true if the record was previously destroyed, false if not</h1>

<p>```</p>

<p>``` ruby
Widget.count</p>

<h1>=> SELECT COUNT(*) FROM widgets WHERE widgets.deleted_at IS NULL</h1>

<p>```</p>

<p>``` ruby
Widget.count ['title = ?', 'test']</p>

<h1>=> SELECT COUNT(*) FROM widgets WHERE widgets.deleted_at IS NULL AND title = 'test'</h1>

<p>```</p>

<p>``` ruby
Widget.count_with_deleted</p>

<h1>=> SELECT COUNT(*) FROM widgets</h1>

<p>```</p>

<p>``` ruby
Widget.delete_all</p>

<h1>=> UPDATE widgets SET deleted_at = '2013-08-15 13:01:59'</h1>

<p>```</p>

<p>``` ruby
Widget.delete_all!</p>

<h1>=> DELETE FROM widgets</h1>

<p>```</p>

<p>``` ruby
@widget.destroy</p>

<h1>=> UPDATE widgets SET deleted_at = '2013-08-15 13:01:59' WHERE id = 1</h1>

<p>```</p>

<p>``` ruby
@widget.destroy!</p>

<h1>=> DELETE FROM widgets WHERE id = 1</h1>

<p>```</p>

<p>``` ruby
@widget.recover!</p>

<h1>=> UPDATE widgets SET deleted_at = NULL WHERE id = 1</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Airbrake: Send Error Notices using Javascript]]></title>
    <link href="http://moorberry.net/blog/airbrake-error-notice-javascript/"/>
    <updated>2013-02-19T12:46:00-06:00</updated>
    <id>http://moorberry.net/blog/airbrake-error-notice-javascript</id>
    <content type="html"><![CDATA[<p>Right now you may be saying to yourself, "but why not just use an AJAX request inside of my Javascript application or use the Image().src hack..."</p>

<!--more-->


<p>Well they don't work across all medias.</p>

<p>You cannot issue requests through the XMLHttpRequest to other domains or subdomains. If you are issuing the request from www.foo.com you also need to target the request at www.foo.com and make certain to remember the www.</p>

<p>If you really need to hit another domain you can use <a href="http://en.wikipedia.org/wiki/JSONP" target="_blank">JsonP</a> where the browser utilizes the <code>&lt;script&gt;</code> tags ability to load scripts from a different domain. The loaded script then executes a callback function to give you the data. But for regular AJAX calls you cannot leave the source domain at all.</p>

<p>See the Wiki article on <a href="http://en.wikipedia.org/wiki/Same_origin_policy" target="_blank">Same Origin Policy</a></p>

<p>In your Rails/Sinatra application controller file:</p>

<p>``` javascript
notice = params[:notice]
url    = URI.parse('http://api.airbrake.io/notifier_api/v2/notices')</p>

<p>request              = Net::HTTP::Post.new(url.path)
request.content_type = 'text/xml'
request.body         = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></p>

<pre><code>                  &lt;notice version=\"2.3\"&gt;
                    &lt;api-key&gt;948fhc4h9f98f190a4d69fee945d8b133cc11&lt;/api-key&gt;
                    &lt;notifier&gt;
                      &lt;name&gt;Airbrake Notifier&lt;/name&gt;
                      &lt;version&gt;3.1.6&lt;/version&gt;
                      &lt;url&gt;http://api.airbrake.io&lt;/url&gt;
                    &lt;/notifier&gt;
                    &lt;error&gt;
                      &lt;class&gt;RuntimeError&lt;/class&gt;
                      &lt;message&gt;#{notice}&lt;/message&gt;
                      &lt;backtrace&gt;
                        &lt;line method=\"public\" file=\"/testapp/app/models/user.rb\" number=\"53\"/&gt;
                        &lt;line method=\"index\" file=\"/testapp/app/controllers/users_controller.rb\" number=\"14\"/&gt;
                      &lt;/backtrace&gt;
                    &lt;/error&gt;
                    &lt;request&gt;
                      &lt;url&gt;#{request.url}&lt;/url&gt;
                      &lt;component/&gt;
                      &lt;action/&gt;
                      &lt;cgi-data&gt;
                        &lt;var key=\"SERVER_NAME\"&gt;example.org&lt;/var&gt;
                        &lt;var key=\"HTTP_USER_AGENT\"&gt;Mozilla&lt;/var&gt;
                      &lt;/cgi-data&gt;
                    &lt;/request&gt;
                    &lt;server-environment&gt;
                      &lt;project-root&gt;/testapp&lt;/project-root&gt;
                      &lt;environment-name&gt;production&lt;/environment-name&gt;
                      &lt;app-version&gt;1.0.0&lt;/app-version&gt;
                    &lt;/server-environment&gt;
                  &lt;/notice&gt;"
</code></pre>

<p>response = Net::HTTP.start(url.host, url.port) {|http| http.request(request)}
```</p>

<p>In your javascript:</p>

<p><code>javascript
function airbrake(notice){
  var airbrake = $.ajax({ url: '/api/v1/error', context: document.body, cache: false, type: 'POST', data: { notice: notice } });
}
</code></p>

<p>To call this function, simply:</p>

<p><code>javascript
airbrake ("This goose won't cook.");
</code></p>

<p>Some alternative error/message handlers include: <a href="http://loggly.com" target="_blank">Loggly</a>, <a href="https://papertrailapp.com/" target="_blank">Papertrail</a>, <a href="https://logentries.com/" target="_blank">Log Entries</a>, or better yet create your own with <a href="https://github.com/flyingmachine/whoops" target="_blank">Whoops</a> which later I'd like to research and develop upon for my own error catching application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Special Notes Lookup in Rails]]></title>
    <link href="http://moorberry.net/blog/notes/"/>
    <updated>2012-11-06T17:52:00-06:00</updated>
    <id>http://moorberry.net/blog/notes</id>
    <content type="html"><![CDATA[<p>Add special notes to your source code comments in Rails to later remind you of tasks you need to complete:</p>

<!--more-->


<p>``` perl
class Article &lt; ActiveRecord::Base
  # TODO add named_scopes
  # FIXME method A is broken
  # OPTIMIZE improve the code</p>

<p>  has_many :comments
  ....
end
```</p>

<p>Some programming IDEs, such as <a href="http://www.aptana.com/" target="_blank">Aptana Studio 3</a> (free), will even highlight the key notation part.</p>

<p>Now, from the command line, you can list these special notes with a rake task:</p>

<p><code>html
$ rake notes
app/models/article.rb:
  * [2] [TODO] add named_scopes
  * [3] [FIXME] method A is broken
  * [4] [OPTIMIZE] improve the code
</code></p>

<p>You can also list notes of each kind individually with <code>rake notes:todo</code>, <code>rake notes:fixme</code> and <code>rake notes:optimize</code>.</p>

<p>You can even list your own, custom notes with <code>rake notes:custom ANNOTATION=MYANNO</code>.</p>
]]></content>
  </entry>
  
</feed>
