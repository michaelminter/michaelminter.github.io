<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Michael Minter]]></title>
  <link href="http://moorberry.net/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://moorberry.net/"/>
  <updated>2013-08-25T10:58:30-05:00</updated>
  <id>http://moorberry.net/</id>
  <author>
    <name><![CDATA[Michael Minter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamically Render Images with PHP]]></title>
    <link href="http://moorberry.net/blog/content-delivery-network/"/>
    <updated>2010-04-22T10:48:00-05:00</updated>
    <id>http://moorberry.net/blog/content-delivery-network</id>
    <content type="html"><![CDATA[<p>If you’ve been frustrated with having to resize images for the sake of continuity or load time and don’t want to develop an entire caching system than this post will be of great value to you.</p>

<!--more-->


<p>Today I will discusses the theory and resolve of applying a system to autonomously resize images, with the GD library for PHP, before they get requested by the browser.</p>

<p>This practice presents many benefits to its use.</p>

<ul>
<li>Save loads of hard drive space</li>
<li>Easy to resize div backgrounds</li>
<li>Faster to call than the use of <a href="/blog/server-vs-client">JavaScript</a>.</li>
</ul>


<br style="clear:both;" />


<h2>Calling the Application With HTML</h2>

<p><code>html
&lt;img src="image.php?i=image.jpg&amp;s=500" /&gt;
</code></p>

<p>Calling the php script is this easy. You can place this tag anywhere on any page and be able to display an image, with exact value constraints, and as many times as you need.</p>

<h2>Developing the image.php Application</h2>

<p><code>perl
header("Content-Type: image/jpeg");
</code></p>

<p>header() will make sure that the browser is aware how to handle the applicaton. Here it enables the page to be viewed as a jpeg source.</p>

<p>``` perl
if (!isset($_GET['s'])) {</p>

<pre><code>$size = 160;
</code></pre>

<p>} else {</p>

<pre><code>$size = $_GET['s'];
</code></pre>

<p>}
$image = $_GET['i'];</p>

<p>list($width, $height) = getimagesize($image);</p>

<p>$ratio = $width/$height;</p>

<p>if ($ratio > 1) {</p>

<pre><code>$newWidth  = $size;
$newHeight = $size/$ratio;
</code></pre>

<p>} else {</p>

<pre><code>$newHeight = $size;
$newWidth  = $size*$ratio;
</code></pre>

<p>}</p>

<h1>creates a copy of the loaded image</h1>

<p>$create = imagecreatefromjpeg($image);</p>

<h1>creates a blank template to work from</h1>

<p>$template = imagecreatetruecolor($newWidth,$newHeight);</p>

<h1>copies the original onto the new template</h1>

<p>imagecopyresized($template, $create, 0, 0, 0, 0, $newWidth, $newHeight, $width, $height);</p>

<h1>displays the image</h1>

<p>ImageJpeg($template);
```</p>

<p>Usually I break this larger portion of my post up into smaller pieces so I can reference all the code being used and what it does. But the fundamentals are so well noted and easy to navigate, that I figured even if I left it as so, that you should have no problem implementing this into your own work.</p>

<h2>Error catching</h2>

<p>If source material is not working properly. Issue the following:</p>

<p>``` perl
if(!function_exists('imagecreatetruecolor')) {</p>

<pre><code>exit('Err, function : imagecreatetruecolor does not exist');
</code></pre>

<p>}
```</p>

<p>function_exists() will check the currently active Apache function repository, both internal and user-defined, to see if the listed function matches anything available.</p>

<p>If you’re receiving the error message than the server you’re running this code on does not support the GD library and you must either set it up manually or contact an administrator to do so for you.</p>

<p>Also note that only Jpeg formats are acceptable by this set up. Extending is not a difficult task. I only wanted you to understand the basics and be able to evolve with PHP from my writings.</p>

<h2>Summary</h2>

<p>Hopefully I’ve left more than enough room for you to adapt this into your own projects. You can add on to this with many of the GD library features documented by the PHP network.</p>

<p>If you develop an extension or even a class, from these tips, please feel free to share by commenting back and letting me know what you’ve done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paypal Express Checkout NVP API]]></title>
    <link href="http://moorberry.net/blog/paypal-express-checkout-nvp-api/"/>
    <updated>2010-04-03T20:19:00-05:00</updated>
    <id>http://moorberry.net/blog/paypal-express-checkout-nvp-api</id>
    <content type="html"><![CDATA[<p>I'm not sure why <a href="http://paypal.com">Paypal</a> has written documentation, regarding its own Express Checkout name-value-pair API, with no enthusiasm at all. The classes used with the Paypal API are extremely easy to use. All of this is likely contributing to the confusion about using Express Checkout. But I’m here now, to save your application, and hopefully your sanity.</p>

<!--more-->




<div style="margin:0 auto 20px;width:600px;"><img src="http://moorberry.net/images/posts/checkout01.jpg" title="SendGrid" alt="SendGrid" /></div>


<p>I’m going to explain why the API objects work and what happens when they’re called. There’s a few different ways that you could go about setting up the product and/or service details. So I’ll keep this post relative to the main focus points and let you handle the before and after parts on an individual basis.</p>

<h2>Referring payment authentication</h2>

<p><code>perl
$paypal = new SetExpressCheckout($totalPrice);
</code></p>

<p>We start out by calling the <strong>SetExpressCheckOut()</strong> class. This class caller instantiates the method you’ll use to set up the parameters required for redirecting the customer <em>to</em> Paypal <em>and back</em>. A variable of the total price has to be set to complete the initiation of this class.</p>

<p>``` perl
$paypal = new SetExpressCheckout($totalPrice);</p>

<p>$paypal->setNVP("RETURNURL", "http://yourURL.com/confirm.php");
$paypal->setNVP("HDRIMG", "http://yourURL.com/image.jpg");
$paypal->setNVP("EMAIL", "$userEmail"); // customer's email
$paypal->setNVP("AMT", $totalPrice);
$paypal->setNVP("SHIPPINGAMT", "32");
$paypal->setNVP("CUSTOM", "Anything you want to put");
$paypal->setNVP("INVNUM", $uniqueID); // personal invoice number</p>

<p>$paypal->getResponse();
```</p>

<p>Before you submit for a transfer to Paypal, know that there are optional values you can send with the setNVP() function, to customize the payment process. All values that can be found, by default, in the etc/NVP/SetExpressCheckout.ini file. I’ve included a list of common practice examples and how to use them in this template.</p>

<p>getResponse() sends the user’s browser to Paypal for authentication of credit information. Specifically to a URL that you’ll have to variably set between test mode (sandbox) and live, in the file named etc/NVP/PayPalNVP.ini.</p>

<div style="margin:0 auto 20px;width:600px;"><img src="http://moorberry.net/images/posts/checkout02.jpg" title="SendGrid" alt="SendGrid" /></div>


<h2>Completing the Sale</h2>

<p><code>perl
$paypal  = new GetExpressCheckoutDetails;
$details = $paypal-&gt;getResponse();
</code></p>

<p><strong>GetExpressCheckoutDetails()</strong> is a class that is most responsible for presenting the custom specifications that you originally sent with SetExpressCheckOut() and SetNVP().</p>

<p><strong>getResponse()</strong> will gather all of the available options as an array, labelled $details.</p>

<p><code>perl
$payment  = new DoExpressCheckoutPayment($totalPrice);
$response = $payment-&gt;getResponse();
</code></p>

<p><strong>DoExpressCheckoutPayment()</strong> will instinctively initiate a communication with Paypal to notify the service that you are ready for the payment to be transferred to your account. The only necessary requisite, of calling this class and it calling to action, is to include the total price in its variable containment field.</p>

<p><strong>getResponse()</strong> will gather the resulting responses by DoExpressCheckoutPayment() and include them in an array, labelled $response.</p>

<p>It could be said that you could apply another (final) verification for your customer to submit before the transaction is completed by DoExpressCheckoutPayment(). But not technically necessary.</p>

<p>``` perl
if ($response['PAYMENTSTATUS'] == 'Completed') {</p>

<pre><code># process information
</code></pre>

<p>}
```</p>

<p>One of the returned values in $response will be the PAYMENTSTATUS key. This is a string result that confirms whether or not the money has made been payed to your account. It will definitely be useful when you set up your system to print an invoice on complete, or some insightfully-formatted summary on failure.</p>

<h2>Displaying results from getResponse</h2>

<p>``` perl
echo '<pre>';
print_r($details);
echo '<pre>';
print_r($response);</p>

<h1>The above code should print out something similar to the following:</h1>

<p>Array
(</p>

<pre><code>[TOKEN] =&gt; EC%2d8DS53628GJ4630109
[TIMESTAMP] =&gt; 2010%2d03%2d31T08%3a25%3a40Z
[CORRELATIONID] =&gt; ce3e460d38d2f
[ACK] =&gt; Success
[VERSION] =&gt; 51%2e0
[BUILD] =&gt; 1247606
[EMAIL] =&gt; test_acct_36654645742_per%40domain%2ecom
[PAYERID] =&gt; W96GXTA5P9BRN
[PAYERSTATUS] =&gt; verified
[FIRSTNAME] =&gt; Test
[LASTNAME] =&gt; User
[COUNTRYCODE] =&gt; US
[SHIPTONAME] =&gt; Test%20User
[SHIPTOSTREET] =&gt; 1%20Main%20St
[SHIPTOCITY] =&gt; San%20Jose
[SHIPTOSTATE] =&gt; CA
[SHIPTOZIP] =&gt; 95131
[SHIPTOCOUNTRYCODE] =&gt; US
[SHIPTOCOUNTRYNAME] =&gt; United%20States
[ADDRESSSTATUS] =&gt; Confirmed
[CUSTOM] =&gt; Anything you want to put
[INVNUM] =&gt; IYUUFEOAS0ME3MTI
</code></pre>

<p>)
Array
(</p>

<pre><code>[TOKEN] =&gt; EC%2d8DS53628GJ4630109
[TIMESTAMP] =&gt; 2010%2d03%2d31T08%3a25%3a43Z
[CORRELATIONID] =&gt; b1989df39a0ca
[ACK] =&gt; Success
[VERSION] =&gt; 51%2e0
[BUILD] =&gt; 1247606
[TRANSACTIONID] =&gt; 1PR0061154034542X
[TRANSACTIONTYPE] =&gt; expresscheckout
[PAYMENTTYPE] =&gt; instant
[ORDERTIME] =&gt; 2010%2d03%2d31T08%3a25%3a42Z
[AMT] =&gt; 152%2e00
[FEEAMT] =&gt; 4%2e71
[TAXAMT] =&gt; 0%2e00
[CURRENCYCODE] =&gt; USD
[PAYMENTSTATUS] =&gt; Completed
[PENDINGREASON] =&gt; None
[REASONCODE] =&gt; None
</code></pre>

<p>)
```</p>

<h2>Testing</h2>

<p>If you don’t have a <a href="https://developer.paypal.com/">Paypal developer account</a>, than you should certainly sign up for one to use Paypal’s Sandbox, which makes a mock version of Paypal available for testing. Comes complete with personal and business accounts, each with their own credentials, and unlimited funds.</p>

<h2>Summary</h2>

<p>Follow the preceding order and you could easily narrow this code down to a a single file, with enough if() constructs, or span it out to many.</p>

<p>You might be left wondering why it seems less daunting than you have expected. That would be because you’re right. These few objects are all that’s needed to handle a shopping cart system on your website.</p>

<p>Maybe Paypal will use this post to refer new users trying to understand how this system works. But I doubt it.</p>

<h3>Note</h3>

<p>Don't forget to adjust your database schema for <em>address2</em> in <strong>$details</strong> when available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server vs Client]]></title>
    <link href="http://moorberry.net/blog/server-vs-client/"/>
    <updated>2010-03-25T21:11:00-05:00</updated>
    <id>http://moorberry.net/blog/server-vs-client</id>
    <content type="html"><![CDATA[<p>My presumption is that it’s because of the passionate advent of JQuery, that there has been an increasing rise of using Javascript, in precedence of a server side language like PHP or Ruby. This circumstance is arguably the sole cause to how and why, <em>mostly designers</em>, are simply not learning a better way. I’m here to enlighten you.</p>

<!--more-->


<p><a href="http://moorberry.net/images/posts/versus.jpg"><img src="http://moorberry.net/images/posts/versus.jpg" alt="Versus" /></a></p>

<p>In opening, I’d like to express, that I hold no animosity for Javascript. Actually I quite often fancy a touch of its elegant lure and almost regularly indulge my viewers with its properties to control aesthetics at a dynamic fashion. But it has its place. If PHP can serve the same purpose, than its obvious strengths, should not be taken for granted.</p>

<p>One prominent example of this that I seem to notice more often in use than others, is the  application of color alternating rows with HTML tables, or also favorably known as the “zebra” effect. Which I’ll be using for my reference material.</p>

<h2>PHP</h2>

<p>``` perl
for ($i = 1;$i &lt; 10;$i++) {</p>

<pre><code>if (($i % 2) == 0) {
    echo '&lt;tr class="zebra"&gt;';
} else {
    echo '&lt;tr&gt;';
}
</code></pre>

<p>}
```</p>

<p>The for() loop, does the accumulating work. It exponentially raises the default value ($i) by one, each iteration, so that the modulus operator (%) can equate the remainder of $i divided by two. So every instance of an even number represented by $i would evaluate to zero.</p>

<h2>Ruby on Rails</h2>

<p>``` ruby
&lt;% @items.each do |item| %>
  <tr class="<%= cycle("even", "odd") %>"></p>

<pre><code>&lt;!-- use item --&gt;
</code></pre>

<p>  </tr>
&lt;% end %>
```</p>

<h2>JQuery</h2>

<p>``` perl
$(document).ready(function(){</p>

<pre><code>$("tr:even").css("background-color", "#EFEFEF");
$("tr:odd").css("background-color", "#FFFFFF");
</code></pre>

<p>});
```</p>

<p>The JQuery even and odd filters are used as index selectors. This method can be used on any page element with just a little bit of reverse engineering.</p>

<h2>Discovering the Front-End</h2>

<p>If you were to analyze the speed of using only Javascript, you would find that it is 16% slower, compared to PHP [1]. Though that number might seem relatively low in scale, because it is, consider all of the other factors when developing for the web.</p>

<p>80% of the average user’s response time is spent on the front-end [2]. This time, is composed of downloading all of the elements necessary to make up the page (Images, libraries, scripts, stylesheets and more). Reducing the number of elements, in turn, reduces the number of HTTP requests required to render the page.</p>

<p>With PHP everything is rendered before any HTTP requests are sent by the server.</p>

<p><img src="https://chart.googleapis.com/chart?cht=bvs&chs=714x100&chd=t:13,20|87,80&chco=4d89f9,c6d9fd&chbh=20&chds=0,160" style="float:left;" /></p>

<br style="clear:both;" />


<p>Graphically interpreted above are the details associated with load times. This analysis completes the HTTP request cycle from initialization. The darker portion, of each representation, shows the percentage of work involved by the server. As consistency shows, a lot of web design and development, relies mostly on what’s being delivered to the browser.</p>

<p><em>in order of appearance: Google, PHP Rockstar</em></p>

<h2>Summary</h2>

<p>It’s certain that a professional web server is going to best the average home network set-up, in performance, any day. It’s your responsibility to take advantage of that, by running some server-side code, to save your guests the frustration of dealing with an idle load time.</p>

<h2>References</h2>

<p>[1] http://www.timestretch.com/FractalBenchmark.html<br/>
[2] http://developer.yahoo.net/blog/archives/2007/03/high_performanc.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Flickr Gallery]]></title>
    <link href="http://moorberry.net/blog/php-flickr-gallery/"/>
    <updated>2010-03-24T15:23:00-05:00</updated>
    <id>http://moorberry.net/blog/php-flickr-gallery</id>
    <content type="html"><![CDATA[<p>In my search for finding a simple solution to any problem, I usually cross many and many blogs and articles, discussing whatever topic. But with so much detail that the solution becomes a problem in itself. So I often times end up resolved to research on my own. In this case, I share the simplest programming method for displaying a <a href="http://flickr.com" title="Flickr">Flickr</a> gallery, with PHP.</p>

<!--more-->


<h2>Assembling Your Variables</h2>

<p>``` perl
$api_key  = 'cr79h3t7g387ghc3fh7338ch87c3ch734';
$user_id  = '33822702%40N08';
$per_page = 10;</p>

<p>$xml      = 'http://api.flickr.com/services/rest/?method=flickr.people.getPublicPhotos&amp;api_key='.$api_key.'&amp;user_id='.$user_id.'&amp;per_page='.$per_page;</p>

<p>$flickr   = simplexml_load_file($xml);
foreach($flickr->photos->photo as $p) {</p>

<pre><code>echo '&lt;a href="http://www.flickr.com/photos/'.$p['owner'].'/'.$p['id'].'"&gt;';
echo '&lt;img src="http://farm'.$p['farm'].'.static.flickr.com/'.$p['server'].'/'.$p['id'].'_'.$p['secret'].'_s.jpg"&gt;';
echo '&lt;/a&gt;';
</code></pre>

<p>}
```</p>

<p><strong>$api_key</strong> is part of an authentication device that allows your server and Flickr to “shake hands” sort of speak. <a href="http://www.flickr.com/services/api/keys/" title="Flickr API Key">You can get your Flickr API key here</a>.</p>

<p><strong>$user_id</strong> is how Flickr identifies you. This value can be found in the URL of your Flickr “photostream”. <a href="http://www.flickr.com/photos/33822702@N08/" title="Michael Minter's Flickr">Here's mine for reference</a>.</p>

<p><strong>$per_page</strong> refers to how many photos will be retrieved from your photostream. Though this limiter is optional, the default count is, “all”. Which means if you have 1,000 plus photos, it could be a very bad thing, for your viewer’s browser load time.</p>

<p><strong>$xml</strong> is a link to the webfile that renders a list of your available photos based on previously noted variables. This line can be modified later to include even more search parameters. (see: below)</p>

<p><strong>$flickr</strong> uses a PHP function called, <a href="http://php.net/manual/en/function.simplexml-load-file.php" title="simplexml_load_file function">simplexml_load_file()</a>, which parses an XML file into an object.</p>

<p>In today's lesson, <strong>$flickr</strong> becomes an array and we use <a href="http://us2.php.net/manual/en/control-structures.foreach.php" title="foreach function">foreach()</a> to extract the values we need, to display the gallery.</p>

<h2>Summary</h2>

<p>This method is just what I needed. Something small, easily accessible, and scalable. As you experiment with this script, you’ll be afforded the opportunity to use many different features of the API, which Flickr offers. <a href="http://www.flickr.com/services/api/" title="Flickr API Index">Click here to view a full list.</a></p>
]]></content>
  </entry>
  
</feed>
